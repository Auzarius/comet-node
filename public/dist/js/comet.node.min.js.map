{"version":3,"sources":["app.js","app.routes.js","services/authService.js","services/ticketService.js","services/userService.js","controllers/mainCtrl.js","controllers/ticketCtrl.js","controllers/userCtrl.js"],"names":["angular","module","config","$httpProvider","interceptors","push","$routeProvider","$locationProvider","when","templateUrl","controller","controllerAs","otherwise","redirectTo","html5Mode","factory","$http","$q","AuthToken","authFactory","login","username","password","post","success","data","setToken","token","logout","isLoggedIn","getToken","getUser","get","cache","reject","message","$window","authTokenFactory","localStorage","getItem","setItem","removeItem","$location","interceptorFactory","request","headers","responseError","response","status","path","ticketFactory","id","active","all","create","ticketData","update","put","event","ticketId","getOne","eventId","eventData","delete","feedback","feedbackId","feedbackData","userFactory","self","userData","$rootScope","Auth","vm","this","loggedIn","$on","location","then","node","user","$","animate","scrollTop","doLogin","processing","error","loginData","doLogout","$scope","Ticket","simpleSearch","toggleAdvanced","searchBox","advancedSearch","$setPristine","tickets","deleteTicket","saveTicket","ticketform","$routeParams","ticket_id","event_processing","eventForm","getTicket","ticket","err","getEvents","events","addEvent","timespent","eventform","deleteEvent","event_id","saveEvent","comments","getFeedback","addComment","commentform","deleteComment","fb_id","saveComment","User","users","deleteUser","type","saveUser","userform","user_id"],"mappings":"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","file":"comet.node.min.js","sourcesContent":["angular.module('comet', \r\n               [\r\n          \t\t'app.routes',\r\n                    'ngAnimate',\r\n          \t\t'authService',\r\n          \t\t'mainCtrl',\r\n          \t\t'userCtrl',\r\n          \t\t'userService',\r\n                    'ticketCtrl',\r\n                    'ticketService'\r\n          \t])\r\n\t// application configuration to integrate token into requests\r\n\t.config(function($httpProvider) {\r\n\r\n\t\t// attach our auth interceptor to the http requests\r\n\t\t$httpProvider.interceptors.push('AuthInterceptor');\r\n\r\n\t});\r\n","// inject ngRoute for all our routing needs\r\nangular.module('app.routes', ['ngRoute'])\r\n\t// configure our routes\r\n\t.config(function ($routeProvider, $locationProvider) {\r\n\t\t$routeProvider\r\n\r\n\t\t\t.when('/', {\r\n\t\t\t\ttemplateUrl: './views/pages/home.html'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/signin', {\r\n\t\t\t\ttemplateUrl : './views/pages/login.html',\r\n\t\t\t\tcontroller  : 'mainController',\r\n\t\t\t\tcontrollerAs: 'login'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/feedback', {\r\n\t\t\t\ttemplateUrl : './views/pages/feedback/all.html',\r\n\t\t\t\tcontroller  : 'feedbackController',\r\n\t\t\t\tcontrollerAs: 'feedback'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/feedback/:fb_id/edit', {\r\n\t\t\t\ttemplateUrl : './views/pages/feedback/edit.html',\r\n\t\t\t\tcontroller  : 'feedbackEditController',\r\n\t\t\t\tcontrollerAs: 'feedback'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t// backup 403 display if the server throws the 403 status code\r\n\t\t\t.when('/forbidden', {\r\n\t\t\t\ttemplateUrl : './views/pages/403.html'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/users', {\r\n\t\t\t\ttemplateUrl : './views/pages/users/all.html',\r\n\t\t\t\tcontroller  : 'userController',\r\n\t\t\t\tcontrollerAs: 'user'\r\n\t\t\t})\r\n\r\n\t\t\t.when('/users/create', {\r\n\t\t\t\ttemplateUrl : './views/pages/users/create.html',\r\n\t\t\t\tcontroller  : 'userCreateController',\r\n\t\t\t\tcontrollerAs: 'user'\r\n\t\t\t})\r\n\r\n\t\t\t.when('/users/:user_id', {\r\n\t\t\t\ttemplateUrl : './views/pages/users/edit.html',\r\n\t\t\t\tcontroller  : 'userEditController',\r\n\t\t\t\tcontrollerAs: 'user'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/profile', {\r\n\t\t\t\ttemplateUrl : './views/pages/profile.html',\r\n\t\t\t\tcontroller  : 'userProfileController',\r\n\t\t\t\tcontrollerAs: 'user'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/tickets', {\r\n\t\t\t\ttemplateUrl : './views/pages/tickets/all.html',\r\n\t\t\t\tcontroller  : 'ticketController',\r\n\t\t\t\tcontrollerAs: 'ticket'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/tickets/all', {\r\n\t\t\t\ttemplateUrl : './views/pages/tickets/all.html',\r\n\t\t\t\tcontroller  : 'ticketAllController',\r\n\t\t\t\tcontrollerAs: 'ticket'\r\n\t\t\t})\r\n\r\n\t\t\t.when('/tickets/create', {\r\n\t\t\t\ttemplateUrl : './views/pages/tickets/create.html',\r\n\t\t\t\tcontroller  : 'ticketCreateController',\r\n\t\t\t\tcontrollerAs: 'ticket'\r\n\t\t\t})\r\n\r\n\t\t\t.when('/tickets/:ticket_id/edit', {\r\n\t\t\t\ttemplateUrl : './views/pages/tickets/edit.html',\r\n\t\t\t\tcontroller  : 'ticketEditController',\r\n\t\t\t\tcontrollerAs: 'ticket'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/tickets/:ticket_id', {\r\n\t\t\t\ttemplateUrl : './views/pages/tickets/single.html',\r\n\t\t\t\tcontroller  : 'ticketViewController',\r\n\t\t\t\tcontrollerAs: 'ticket'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/events/:event_id/edit', {\r\n\t\t\t\ttemplateUrl : './views/pages/events/edit.html',\r\n\t\t\t\tcontroller  : 'eventEditController',\r\n\t\t\t\tcontrollerAs: 'event'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.otherwise({\r\n\t\t\t\tredirectTo: '/'\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t// set our app up to have pretty URLS\r\n\t\t\t$locationProvider.html5Mode(true);\r\n\t});\r\n\t","// Courtesy of Scotch.io Chris Sevilleja & Holly Lloyd\r\n// http://leanpub.com/mean-machine\r\n\r\nangular.module('authService', [])\r\n\r\n// ===================================================\r\n// auth factory to login and get information\r\n// inject $http for communicating with the API\r\n// inject $q to return promise objects\r\n// inject AuthToken to manage tokens\r\n// ===================================================\r\n.factory('Auth', function($http, $q, AuthToken) {\r\n\r\n\t// create auth factory object\r\n\tvar authFactory = {};\r\n\r\n\t// log a user in\r\n\tauthFactory.login = function(username, password) {\r\n\r\n\t\t// return the promise object and its data\r\n\t\treturn $http.post('/api/authenticate', {\r\n\t\t\tusername: username,\r\n\t\t\tpassword: password\r\n\t\t})\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tAuthToken.setToken(data.token);\r\n       \t\t\treturn data;\r\n\t\t\t});\r\n\t};\r\n\r\n\t// log a user out by clearing the token\r\n\tauthFactory.logout = function() {\r\n\t\t// clear the token\r\n\t\tAuthToken.setToken();\r\n\t};\r\n\r\n\t// check if a user is logged in\r\n\t// checks if there is a local token\r\n\tauthFactory.isLoggedIn = function() {\r\n\t\tif (AuthToken.getToken()) \r\n\t\t\treturn true;\r\n\t\telse\r\n\t\t\treturn false;\t\r\n\t};\r\n\r\n\t// get the logged in user\r\n\tauthFactory.getUser = function() {\r\n\t\tif (AuthToken.getToken())\r\n\t\t\treturn $http.get('/api/me', { cache: false });\r\n\t\telse\r\n\t\t\treturn $q.reject({ message: 'User has no token.' });\t\t\r\n\t};\r\n\r\n\t// return auth factory object\r\n\treturn authFactory;\r\n\r\n})\r\n\r\n// ===================================================\r\n// factory for handling tokens\r\n// inject $window to store token client-side\r\n// ===================================================\r\n.factory('AuthToken', function($window) {\r\n\r\n\tvar authTokenFactory = {};\r\n\r\n\t// get the token out of local storage\r\n\tauthTokenFactory.getToken = function() {\r\n\t\treturn $window.localStorage.getItem('token');\r\n\t};\r\n\r\n\t// function to set token or clear token\r\n\t// if a token is passed, set the token\r\n\t// if there is no token, clear it from local storage\r\n\tauthTokenFactory.setToken = function(token) {\r\n\t\tif (token)\r\n\t\t\t$window.localStorage.setItem('token', token);\r\n\t \telse\r\n\t\t\t$window.localStorage.removeItem('token');\r\n\t};\r\n\r\n\treturn authTokenFactory;\r\n\r\n})\r\n\r\n// ===================================================\r\n// application configuration to integrate token into requests\r\n// ===================================================\r\n.factory('AuthInterceptor', function($q, $location, AuthToken) {\r\n\r\n\tvar interceptorFactory = {};\r\n\r\n\t// this will happen on all HTTP requests\r\n\tinterceptorFactory.request = function(config) {\r\n\r\n\t\t// grab the token\r\n\t\tvar token = AuthToken.getToken();\r\n\r\n\t\t// if the token exists, add it to the header as x-access-token\r\n\t\tif (token) \r\n\t\t\tconfig.headers['x-access-token'] = token;\r\n\t\t\r\n\t\treturn config;\r\n\t};\r\n\r\n\t// happens on response errors\r\n\tinterceptorFactory.responseError = function(response) {\r\n\r\n\t\t// if our server returns a 403 forbidden response\r\n\t\tif (response.status == 401) {\r\n\t\t\tAuthToken.setToken();\r\n\t\t\t$location.path('/signin');\r\n\t\t} else if (response.status == 403) {\r\n\t\t\t$location.path('/forbidden');\r\n\t\t}\r\n\r\n\t\t// return the errors from the server as a promise\r\n\t\treturn $q.reject(response);\r\n\t};\r\n\r\n\treturn interceptorFactory;\r\n\t\r\n});","angular.module('ticketService', [])\r\n\r\n.factory('Ticket', function($http) {\r\n\r\n\t// create a new object\r\n\tvar ticketFactory = {};\r\n\r\n\t// get a single ticket\r\n\tticketFactory.get = function(id) {\r\n\t\treturn $http.get('/api/tickets/' + id);\r\n\t};\r\n\r\n\t// get all ticket\r\n\tticketFactory.active = function() {\r\n\t\treturn $http.get('/api/tickets');\r\n\t};\r\n\t\r\n\tticketFactory.all = function() {\r\n\t\treturn $http.get('/api/tickets/all');\r\n\t};\r\n\r\n\t// create a ticket\r\n\tticketFactory.create = function(ticketData) {\r\n\t\treturn $http.post('/api/tickets/', ticketData);\r\n\t};\r\n\r\n\t// update a ticket\r\n\tticketFactory.update = function(id, ticketData) {\r\n\t\treturn $http.put('/api/tickets/' + id, ticketData);\r\n\t};\r\n\r\n\t// delete a ticket\r\n\tticketFactory.delete = function(id) {\r\n\t\treturn $http.delete('/api/tickets/' + id);\r\n\t};\r\n\t\r\n\tticketFactory.event = {\r\n\t\tget : function(ticketId) {\r\n\t\t\treturn $http.get('/api/tickets/' + ticketId + '/events');\r\n\t\t},\r\n\t\t\r\n\t\tgetOne : function (eventId) {\r\n\t\t\treturn $http.get('/api/events/' + eventId);\r\n\t\t},\r\n\t\t\r\n\t\tcreate : function(ticketId, eventData) {\r\n\t\t\treturn $http.post('/api/tickets/' + ticketId + '/events', eventData);\r\n\t\t},\r\n\t\t\r\n\t\tupdate : function(eventId, eventData) {\r\n\t\t\treturn $http.put('/api/events/' + eventId, eventData);\r\n\t\t},\r\n\t\t\r\n\t\tdelete : function(eventId) {\r\n\t\t\treturn $http.delete('/api/events/' + eventId)\r\n\t\t}\r\n\t};\r\n\t\r\n\tticketFactory.feedback = {\r\n\t\tget : function () {\r\n\t\t\treturn $http.get('/api/feedback/');\r\n\t\t},\r\n\t\t\r\n\t\tgetOne : function (feedbackId) {\r\n\t\t\treturn $http.get('/api/feedback/' + feedbackId);\r\n\t\t},\r\n\t\t\r\n\t\tcreate : function (feedbackData) {\r\n\t\t\treturn $http.post('/api/feedback/', feedbackData);\r\n\t\t},\r\n\t\t\r\n\t\tupdate : function (feedbackId, feedbackData) {\r\n\t\t\treturn $http.put('/api/feedback/' + feedbackId, feedbackData);\r\n\t\t},\r\n\t\t\r\n\t\tdelete : function (feedbackId) {\r\n\t\t\treturn $http.delete('/api/feedback/' + feedbackId)\r\n\t\t}\r\n\t};\r\n\r\n\t// return our entire ticketFactory object\r\n\treturn ticketFactory;\r\n\r\n});","angular.module('userService', [])\r\n\r\n.factory('User', function($http) {\r\n\r\n\t// create a new object\r\n\tvar userFactory = {};\r\n\r\n\t// get a single user\r\n\tuserFactory.get = function(id) {\r\n\t\treturn $http.get('/api/users/' + id);\r\n\t};\r\n\t\r\n\t// get self\r\n\tuserFactory.self = function() {\r\n\t\treturn $http.get('/api/me');\r\n\t};\r\n\r\n\t// get all users\r\n\tuserFactory.all = function() {\r\n\t\treturn $http.get('/api/users/');\r\n\t};\r\n\r\n\t// create a user\r\n\tuserFactory.create = function(userData) {\r\n\t\treturn $http.post('/api/users/', userData);\r\n\t};\r\n\r\n\t// update a user\r\n\tuserFactory.update = function(id, userData) {\r\n\t\treturn $http.put('/api/users/' + id, userData);\r\n\t};\r\n\r\n\t// delete a user\r\n\tuserFactory.delete = function(id) {\r\n\t\treturn $http.delete('/api/users/' + id);\r\n\t};\r\n\r\n\t// return our entire userFactory object\r\n\treturn userFactory;\r\n\r\n});","angular.module('mainCtrl', ['angularMoment'])\r\n\r\n.controller('mainController', function($rootScope, $location, Auth) {\r\n\r\n\tvar vm = this;\r\n\r\n\t// get info if a person is logged in\r\n\tvm.loggedIn = Auth.isLoggedIn();\r\n\t\r\n\t\r\n\t// check to see if a user is logged in on every request\r\n\t$rootScope.$on('$routeChangeStart', function(event) {\r\n\t\tvm.loggedIn = Auth.isLoggedIn();\t\r\n\t\t\r\n\t\tif (vm.loggedIn) {\r\n\t\t\tvm.location = $location.path();\r\n\t\t\tAuth.getUser()\r\n\t\t\t.then(function(node) {\r\n\t\t\t\tvm.user = node.data\r\n\t\t\t});\t\r\n\t\t\t\r\n\t\t\tif ( $location.path() == '/signin' ) {\r\n\t\t\t\t$location.path('/');\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} else if ( $location.path() == '/' || $location.path() == '/signin' ) {\r\n\t\t\t// do nothing;\r\n\t\t} else {\r\n\t\t\t$location.path('/signin');\r\n\t\t}\r\n\t\t// get user information on page load\r\n\t\t\r\n\t});\r\n\t\r\n\t// resets the view to the top of the page when a new route loads\r\n\t// this prevents the view focus from staying the same from page to page\r\n\t$rootScope.$on('$routeChangeSuccess',function() { \r\n\t\t$(\"html, body\").animate({ scrollTop: 0 }, 200); \r\n\t});\r\n\r\n\t// function to handle login form\r\n\tvm.doLogin = function() {\r\n\t\tvm.processing = true;\r\n\r\n\t\t// clear the error\r\n\t\tvm.error = '';\r\n\r\n\t\tAuth.login(vm.loginData.username, vm.loginData.password)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tvm.processing = false;\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tvm.user = vm.loginData.username;\r\n\t\t\t\t\r\n\t\t\t\t// if a user successfully logs in, redirect to tickets page\r\n\t\t\t\tif (data.success)\t\t\t\r\n\t\t\t\t\t$location.path('/');\r\n\t\t\t\telse \r\n\t\t\t\t\tvm.error = data.message;\r\n\t\t\t\t\r\n\t\t\t});\r\n\t};\r\n\r\n\t// function to handle logging out\r\n\tvm.doLogout = function() {\r\n\t\tAuth.logout();\r\n\t\tvm.user = null;\r\n\t\t\r\n\t\t$location.path('/signin');\r\n\t};\r\n\r\n});","angular.module('ticketCtrl', ['ticketService'])\r\n\r\n.controller('ticketController', function($scope, Ticket) {\r\n\r\n\tvar vm = this;\r\n\tvm.simpleSearch = true;\r\n\t// set a processing variable to show loading things\r\n\tvm.processing = true;\r\n\t\r\n\tvm.toggleAdvanced = function() {\r\n\t\t$scope.searchBox = null;\r\n\t\t$scope.advancedSearch.$setPristine();\r\n\t\tvm.simpleSearch = !vm.simpleSearch;\r\n\t}\r\n\t\r\n\t// grab all the active tickets at page load\r\n\tTicket.active()\r\n\t\t.success(function(node) {\r\n\r\n\t\t\tif ( node.success == false || node.data == null ) {\r\n\t\t\t\tvm.tickets = null;\r\n\t\t\t} else {\r\n\t\t\t\tvm.tickets = node.data;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvm.processing = false;\r\n\t\t})\r\n\t\t.error(function(node) {\r\n\t\t\tif (node) {\r\n\t\t\t\tvm.message = node;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvm.tickets = null;\r\n\t\t\tvm.processing = false;\r\n\t\t})\r\n\r\n\t// function to delete a ticket\r\n\tvm.deleteTicket = function(id) {\r\n\t\tvm.processing = true;\r\n\t\t\r\n\t\tTicket.delete(id)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\t\r\n\t\t\t\tif ( data.success) {\r\n\t\t\t\t\tTicket.active()\r\n\t\t\t\t\t\t.success(function(node) {\r\n\t\t\t\t\t\t\tvm.tickets = node.data;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t});\r\n\t};\r\n})\r\n\r\n\r\n.controller('ticketAllController', function($scope, Ticket) {\r\n\r\n\tvar vm = this;\r\n\tvm.simpleSearch = true;\r\n\t// set a processing variable to show loading things\r\n\tvm.processing = true;\r\n\t\r\n\tvm.toggleAdvanced = function() {\r\n\t\t$scope.searchBox = null;\r\n\t\t$scope.advancedSearch.$setPristine();\r\n\t\tvm.simpleSearch = !vm.simpleSearch;\r\n\t}\r\n\t\r\n\t// grab all the active tickets at page load\r\n\tTicket.all()\r\n\t\t.success(function(node) {\r\n\r\n\t\t\tif ( node.success == false || node.data == null) {\r\n\t\t\t\tvm.tickets = null;\r\n\t\t\t} else {\r\n\t\t\t\tvm.tickets = node.data;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvm.processing = false;\r\n\t\t});\r\n\r\n\t// function to delete a ticket\r\n\tvm.deleteTicket = function(id) {\r\n\t\tvm.processing = true;\r\n\t\t\r\n\t\tTicket.delete(id)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\t\r\n\t\t\t\tif ( data.success) {\r\n\t\t\t\t\tTicket.all()\r\n\t\t\t\t\t\t.success(function(node) {\r\n\t\t\t\t\t\t\tvm.tickets = node.data;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t});\r\n\t};\r\n})\r\n\r\n// controller applied to ticket creation page\r\n.controller('ticketCreateController', function($scope, Ticket) {\r\n\t\r\n\tvar vm = this;\r\n\r\n\t// function to create a ticket\r\n\tvm.saveTicket = function() {\r\n\t\tvm.processing = true;\r\n\t\tvm.message = '';\r\n\t\t\r\n\t\t// use the create function in the ticketService\r\n\t\tTicket.create(vm.ticketData)\r\n\t\t\t.success(function(node) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = node.message;\r\n\t\t\t\tvm.ticketData = {};\r\n\t\t\t\t$scope.ticketform.$setPristine();\r\n\t\t\t\t$(\"html, body\").animate({ scrollTop: 0 }, 200); \r\n\t\t\t});\r\n\t\t\t\r\n\t};\r\n})\r\n\r\n// controller applied to ticket edit page\r\n.controller('ticketEditController', function($routeParams, Ticket) {\r\n\r\n\tvar vm = this;\r\n\r\n\t// get the ticket data for the ticket you want to edit\r\n\t// $routeParams is the way we grab data from the URL\r\n\tTicket.get($routeParams.ticket_id)\r\n\t\t.success(function(node) {\r\n\t\t\tvm.ticketData = node.data;\r\n\t\t});\r\n\r\n\t// function to save the ticket\r\n\tvm.saveTicket = function() {\r\n\t\tvm.processing = true;\r\n\t\tvm.message = '';\r\n\r\n\t\t// call the ticketService function to update \r\n\t\tTicket.update($routeParams.ticket_id, vm.ticketData)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t\t$(\"html, body\").animate({ scrollTop: 0 }, 200); \r\n\t\t\t});\r\n\t};\r\n\r\n})\r\n\r\n.controller('ticketViewController', function($scope, $routeParams, $location, Ticket) {\r\n\r\n\tvar vm = this;\r\n\tvm.processing = true;\r\n\tvm.event_processing = true;\r\n\t$scope.eventForm = {};\r\n\t\r\n\t// get the ticket data for the ticket you want to view\r\n\t// $routeParams is the way we grab data from the URL\r\n\tvm.getTicket = function(id) {\r\n\t\tTicket.get(id)\r\n\t\t\t.success(function(node) {\r\n\t\t\t\tvm.ticket = node.data;\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t})\r\n\t\t\t.error(function(err) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = err;\r\n\t\t\t});\r\n\t}\r\n\t\r\n\tvm.getTicket($routeParams.ticket_id);\r\n\t\r\n\tvm.deleteTicket = function(id) {\r\n\t\tvm.processing = true;\r\n\t\t\r\n\t\tTicket.delete(id)\r\n\t\t\t.success(function(data) {\t\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\t\r\n\t\t\t\tif ( data.success) {\r\n\t\t\t\t\t$location.path('/tickets');\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t}\r\n\t\r\n\tvm.getEvents = function() {\r\n\t\tTicket.event.get($routeParams.ticket_id)\r\n\t\t.success(function(node) {\r\n\t\t\tvm.events = node.data;\r\n\t\t\tvm.event_processing = false;\r\n\t\t})\r\n\t\t.error(function(err) {\r\n\t\t\tvm.event_processing = false;\r\n\t\t\tvm.message = err;\r\n\t\t});\r\n\t}\t\r\n\t\t\r\n\tvm.getEvents();\r\n\t\r\n\tvm.addEvent = function() {\r\n\t\tvm.event_processing = true;\r\n\t\tvm.message = '';\r\n\r\n\t\tTicket.event.create($routeParams.ticket_id, vm.eventData)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tvm.event_processing = false;\r\n\t\t\t\tvm.ticket.timespent += vm.eventData.timespent;\r\n\t\t\t\tvm.eventData = {};\r\n\t\t\t\t$scope.eventform.$setPristine();\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t\tvm.getEvents();\r\n\t\t\t})\r\n\t\t\t.error(function(data) {\r\n\t\t\t\tvm.event_processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t});\r\n\t}\r\n\t\r\n\tvm.deleteEvent = function(id) {\r\n\t\tvm.event_processing = true;\r\n\t\t\r\n\t\tTicket.event.delete(id)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tif ( data.success ) {\r\n\t\t\t\t\tvm.getEvents();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvm.getTicket($routeParams.ticket_id);\r\n\t\t\t\tvm.event_processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t})\r\n\t\t\t.error(function(data) {\r\n\t\t\t\tvm.event_processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t});\r\n\t}\r\n})\r\n\r\n.controller('eventEditController', function($routeParams, Ticket) {\r\n\r\n\tvar vm = this;\r\n\tvm.eventData = {};\r\n\r\n\tTicket.event.getOne($routeParams.event_id)\r\n\t\t.success(function(node) {\r\n\t\t\tvm.eventData = node.data;\r\n\t\t});\r\n\r\n\t// function to save the event\r\n\tvm.saveEvent = function() {\r\n\t\tvm.processing = true;\r\n\t\tvm.message = '';\r\n\r\n\t\t// call the ticketService function to update \r\n\t\tTicket.event.update(vm.eventData.id, vm.eventData)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t\t$(\"html, body\").animate({ scrollTop: 0 }, 200); \r\n\t\t\t})\r\n\t\t\t.error(function(data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t});\r\n\t};\r\n})\r\n\r\n.controller('feedbackController', function($scope, $location, Ticket) {\r\n\r\n\tvar vm = this;\r\n\tvm.comments = {};\r\n\tvm.processing = true;\r\n\t\r\n\tvm.getFeedback = function() {\r\n\t\tTicket.feedback.get()\r\n\t\t.success(function(node) {\r\n\t\t\tvm.comments = node.data;\r\n\t\t\tvm.processing = false;\r\n\t\t})\r\n\t\t.error(function(err) {\r\n\t\t\tvm.processing = false;\r\n\t\t\tvm.message = err;\r\n\t\t});\r\n\t};\r\n\t\t\r\n\tvm.getFeedback();\r\n\t\r\n\tvm.addComment = function() {\r\n\t\tvm.processing = true;\r\n\t\tvm.message = '';\r\n\t\t\r\n\t\tTicket.feedback.create(vm.feedbackData)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.feedbackData = {};\r\n\t\t\t\t$scope.commentform.$setPristine();\r\n\t\t\t\tvm.getFeedback();\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t})\r\n\t\t\t.error(function(data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t});\r\n\t};\r\n\t\r\n\tvm.deleteComment = function(id) {\r\n\t\tvm.processing = true;\r\n\t\t\r\n\t\tTicket.feedback.delete(id)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tif ( data.success ) {\r\n\t\t\t\t\tvm.getFeedback();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t})\r\n\t\t\t.error(function(data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t});\r\n\t};\r\n})\r\n\r\n.controller('feedbackEditController', function($routeParams, Ticket) {\r\n\r\n\tvar vm = this;\r\n\tvm.processing = true;\r\n\tvm.feedbackData = {};\r\n\t\r\n\tTicket.feedback.getOne($routeParams.fb_id)\r\n\t\t.success(function(node) {\r\n\t\t\tvm.feedbackData = node.data;\r\n\t\t\tvm.processing = false;\r\n\t\t})\r\n\t\t.error(function(node) {\r\n\t\t\tvm.processing = false;\r\n\t\t});\r\n\r\n\t// function to save the event\r\n\tvm.saveComment = function() {\r\n\t\tvm.processing = true;\r\n\t\tvm.message = '';\r\n\r\n\t\t// call the ticketService function to update \r\n\t\tTicket.feedback.update(vm.feedbackData.id, vm.feedbackData)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t\t$(\"html, body\").animate({ scrollTop: 0 }, 200); \r\n\t\t\t})\r\n\t\t\t.error(function(data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t});\r\n\t};\r\n})\r\n","angular.module('userCtrl', ['userService'])\r\n\r\n.controller('userController', function(User) {\r\n\r\n\tvar vm = this;\r\n\r\n\t// set a processing variable to show loading things\r\n\tvm.processing = true;\r\n\r\n\t// grab all the users at page load\r\n\tUser.all()\r\n\t\t.success(function (node) {\r\n\r\n\t\t\tif ( node.success == false || node.data == null ) {\r\n\t\t\t\tvm.users = null;\r\n\t\t\t} else {\r\n\t\t\t\tvm.users = node.data;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvm.processing = false;\r\n\t\t})\r\n\t\t.error(function (node) {\r\n\t\t\tif (node) {\r\n\t\t\t\tvm.message = node;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvm.users = null;\r\n\t\t\tvm.processing = false;\r\n\t\t});\r\n\r\n\t// function to delete a user\r\n\tvm.deleteUser = function(id) {\r\n\t\tvm.processing = true;\r\n\t\tvm.users = {};\r\n\t\t\r\n\t\tUser.delete(id)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\t\r\n\t\t\t\t// get all users to update the table\r\n\t\t\t\t// could also return the list of users with the delete call\r\n\t\t\t\tUser.all()\r\n\t\t\t\t\t.success(function (node) {\r\n\t\t\t\t\t\tvm.processing = false;\r\n\t\t\t\t\t\tvm.users = node.data;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvm.message = 'The user was successfully deleted!'\r\n\t\t\t\t\t});\r\n\r\n\t\t\t});\r\n\t};\r\n\r\n})\r\n\r\n// controller applied to user creation page\r\n.controller('userCreateController', function($scope, User) {\r\n\t\r\n\tvar vm = this;\r\n\tvm.type = 'create';\r\n\tvm.userData = {};\r\n\r\n\t// function to create a user\r\n\tvm.saveUser = function() {\r\n\t\tvm.processing = true;\r\n\t\tvm.message = '';\r\n\r\n\t\t// use the create function in the userService\r\n\t\tUser.create(vm.userData)\r\n\t\t\t.success(function (data) {\r\n\t\t\t\tvm.processing = false;\t\t\t\t\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t\t\r\n\t\t\t\tif (data.success) {\r\n\t\t\t\t\tvm.userData = {};\r\n\t\t\t\t\t$scope.userform.$setPristine();\r\n\t\t\t\t\t$(\"html, body\").animate({ scrollTop: 0 }, 200); \r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t};\t\r\n\r\n})\r\n\r\n// controller applied to user edit page\r\n.controller('userEditController', function($routeParams, User) {\r\n\r\n\tvar vm = this;\r\n\tvm.type = 'edit';\r\n\t\r\n\t// get the user data for the user you want to edit\r\n\t// $routeParams is the way we grab data from the URL\r\n\tUser.get($routeParams.user_id)\r\n\t\t.success(function (node) {\r\n\t\t\tvm.userData = node.data;\r\n\t\t});\r\n\r\n\t// function to save the user\r\n\tvm.saveUser = function() {\r\n\t\tvm.processing = true;\r\n\t\tvm.message = '';\r\n\r\n\t\t// call the userService function to update \r\n\t\tUser.update($routeParams.user_id, vm.userData)\r\n\t\t\t.success(function (data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t\t$(\"html, body\").animate({ scrollTop: 0 }, 200); \r\n\t\t\t});\r\n\t};\r\n\r\n})\r\n\r\n// controller applied to user edit page\r\n.controller('userProfileController', function($routeParams, User) {\r\n\r\n\tvar vm = this;\r\n\r\n\t// get the user data for the user you want to edit\r\n\t// $routeParams is the way we grab data from the URL\r\n\tUser.self()\r\n\t\t.success(function (user) {\r\n\t\t\tvm.userData = user;\r\n\t\t});\r\n\r\n\t// function to save the user\r\n\tvm.saveUser = function() {\r\n\t\tvm.processing = true;\r\n\t\tvm.message = '';\r\n\r\n\t\t// call the userService function to update \r\n\t\tUser.update(vm.userData.id, vm.userData)\r\n\t\t\t.success(function (data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t\t$(\"html, body\").animate({ scrollTop: 0 }, 200); \r\n\t\t\t});\r\n\t};\r\n\r\n});\r\n\r\n"],"sourceRoot":"/source/"}