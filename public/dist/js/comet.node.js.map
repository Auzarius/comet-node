{"version":3,"sources":["app.js","app.routes.js","annotated/1.js","annotated/2.js","annotated/3.js","annotated/4.js","annotated/5.js","annotated/6.js","annotated/7.js","annotated/8.js","controllers/mainCtrl.js","controllers/ticketCtrl.js","controllers/userCtrl.js","services/authService.js","services/ticketService.js","services/userService.js"],"names":[],"mappings":"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","file":"comet.node.js","sourcesContent":["angular.module('comet', \r\n               [\r\n          \t\t'app.routes',\r\n                    'ngAnimate',\r\n          \t\t'authService',\r\n          \t\t'mainCtrl',\r\n          \t\t'userCtrl',\r\n          \t\t'userService',\r\n                    'ticketCtrl',\r\n                    'ticketService'\r\n          \t])\r\n\t// application configuration to integrate token into requests\r\n\t.config(function($httpProvider) {\r\n\r\n\t\t// attach our auth interceptor to the http requests\r\n\t\t$httpProvider.interceptors.push('AuthInterceptor');\r\n\r\n\t});\r\n","// inject ngRoute for all our routing needs\r\nangular.module('app.routes', ['ngRoute'])\r\n\t// configure our routes\r\n\t.config(function ($routeProvider, $locationProvider) {\r\n\t\t$routeProvider\r\n\r\n\t\t\t.when('/', {\r\n\t\t\t\ttemplateUrl: './views/pages/home.html'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/signin', {\r\n\t\t\t\ttemplateUrl : './views/pages/login.html',\r\n\t\t\t\tcontroller  : 'mainController',\r\n\t\t\t\tcontrollerAs: 'login'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/feedback', {\r\n\t\t\t\ttemplateUrl : './views/pages/feedback/all.html',\r\n\t\t\t\tcontroller  : 'feedbackController',\r\n\t\t\t\tcontrollerAs: 'feedback'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/feedback/:fb_id/edit', {\r\n\t\t\t\ttemplateUrl : './views/pages/feedback/edit.html',\r\n\t\t\t\tcontroller  : 'feedbackEditController',\r\n\t\t\t\tcontrollerAs: 'feedback'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t// backup 403 display if the server throws the 403 status code\r\n\t\t\t.when('/forbidden', {\r\n\t\t\t\ttemplateUrl : './views/pages/403.html'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/users', {\r\n\t\t\t\ttemplateUrl : './views/pages/users/all.html',\r\n\t\t\t\tcontroller  : 'userController',\r\n\t\t\t\tcontrollerAs: 'user'\r\n\t\t\t})\r\n\r\n\t\t\t.when('/users/create', {\r\n\t\t\t\ttemplateUrl : './views/pages/users/create.html',\r\n\t\t\t\tcontroller  : 'userCreateController',\r\n\t\t\t\tcontrollerAs: 'user'\r\n\t\t\t})\r\n\r\n\t\t\t.when('/users/:user_id', {\r\n\t\t\t\ttemplateUrl : './views/pages/users/edit.html',\r\n\t\t\t\tcontroller  : 'userEditController',\r\n\t\t\t\tcontrollerAs: 'user'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/profile', {\r\n\t\t\t\ttemplateUrl : './views/pages/profile.html',\r\n\t\t\t\tcontroller  : 'userProfileController',\r\n\t\t\t\tcontrollerAs: 'user'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/tickets', {\r\n\t\t\t\ttemplateUrl : './views/pages/tickets/all.html',\r\n\t\t\t\tcontroller  : 'ticketController',\r\n\t\t\t\tcontrollerAs: 'ticket'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/tickets/all', {\r\n\t\t\t\ttemplateUrl : './views/pages/tickets/all.html',\r\n\t\t\t\tcontroller  : 'ticketAllController',\r\n\t\t\t\tcontrollerAs: 'ticket'\r\n\t\t\t})\r\n\r\n\t\t\t.when('/tickets/create', {\r\n\t\t\t\ttemplateUrl : './views/pages/tickets/create.html',\r\n\t\t\t\tcontroller  : 'ticketCreateController',\r\n\t\t\t\tcontrollerAs: 'ticket'\r\n\t\t\t})\r\n\r\n\t\t\t.when('/tickets/:ticket_id/edit', {\r\n\t\t\t\ttemplateUrl : './views/pages/tickets/edit.html',\r\n\t\t\t\tcontroller  : 'ticketEditController',\r\n\t\t\t\tcontrollerAs: 'ticket'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/tickets/:ticket_id', {\r\n\t\t\t\ttemplateUrl : './views/pages/tickets/single.html',\r\n\t\t\t\tcontroller  : 'ticketViewController',\r\n\t\t\t\tcontrollerAs: 'ticket'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/events/:event_id/edit', {\r\n\t\t\t\ttemplateUrl : './views/pages/events/edit.html',\r\n\t\t\t\tcontroller  : 'eventEditController',\r\n\t\t\t\tcontrollerAs: 'event'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.otherwise({\r\n\t\t\t\tredirectTo: '/'\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t// set our app up to have pretty URLS\r\n\t\t\t$locationProvider.html5Mode(true);\r\n\t});\r\n\t","angular.module('mainCtrl', ['angularMoment'])\r\n\r\n.controller('mainController', [\"$rootScope\", \"$location\", \"Auth\", function($rootScope, $location, Auth) {\r\n\r\n\tvar vm = this;\r\n\r\n\t// get info if a person is logged in\r\n\tvm.loggedIn = Auth.isLoggedIn();\r\n\t\r\n\t\r\n\t// check to see if a user is logged in on every request\r\n\t$rootScope.$on('$routeChangeStart', function(event) {\r\n\t\tvm.loggedIn = Auth.isLoggedIn();\t\r\n\t\t\r\n\t\tif (vm.loggedIn) {\r\n\t\t\tvm.location = $location.path();\r\n\t\t\tAuth.getUser()\r\n\t\t\t.then(function(node) {\r\n\t\t\t\tvm.user = node.data\r\n\t\t\t});\t\r\n\t\t\t\r\n\t\t\tif ( $location.path() == '/signin' ) {\r\n\t\t\t\t$location.path('/');\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} else if ( $location.path() == '/' || $location.path() == '/signin' ) {\r\n\t\t\t// do nothing;\r\n\t\t} else {\r\n\t\t\t$location.path('/signin');\r\n\t\t}\r\n\t\t// get user information on page load\r\n\t\t\r\n\t});\r\n\t\r\n\t// resets the view to the top of the page when a new route loads\r\n\t// this prevents the view focus from staying the same from page to page\r\n\t$rootScope.$on('$routeChangeSuccess',function() { \r\n\t\t$(\"html, body\").animate({ scrollTop: 0 }, 200); \r\n\t});\r\n\r\n\t// function to handle login form\r\n\tvm.doLogin = function() {\r\n\t\tvm.processing = true;\r\n\r\n\t\t// clear the error\r\n\t\tvm.error = '';\r\n\r\n\t\tAuth.login(vm.loginData.username, vm.loginData.password)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tvm.processing = false;\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tvm.user = vm.loginData.username;\r\n\t\t\t\t\r\n\t\t\t\t// if a user successfully logs in, redirect to tickets page\r\n\t\t\t\tif (data.success)\t\t\t\r\n\t\t\t\t\t$location.path('/');\r\n\t\t\t\telse \r\n\t\t\t\t\tvm.error = data.message;\r\n\t\t\t\t\r\n\t\t\t});\r\n\t};\r\n\r\n\t// function to handle logging out\r\n\tvm.doLogout = function() {\r\n\t\tAuth.logout();\r\n\t\tvm.user = null;\r\n\t\t\r\n\t\t$location.path('/signin');\r\n\t};\r\n\r\n}]);","// Courtesy of Scotch.io Chris Sevilleja & Holly Lloyd\r\n// http://leanpub.com/mean-machine\r\n\r\nangular.module('authService', [])\r\n\r\n// ===================================================\r\n// auth factory to login and get information\r\n// inject $http for communicating with the API\r\n// inject $q to return promise objects\r\n// inject AuthToken to manage tokens\r\n// ===================================================\r\n.factory('Auth', [\"$http\", \"$q\", \"AuthToken\", function($http, $q, AuthToken) {\r\n\r\n\t// create auth factory object\r\n\tvar authFactory = {};\r\n\r\n\t// log a user in\r\n\tauthFactory.login = function(username, password) {\r\n\r\n\t\t// return the promise object and its data\r\n\t\treturn $http.post('/api/authenticate', {\r\n\t\t\tusername: username,\r\n\t\t\tpassword: password\r\n\t\t})\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tAuthToken.setToken(data.token);\r\n       \t\t\treturn data;\r\n\t\t\t});\r\n\t};\r\n\r\n\t// log a user out by clearing the token\r\n\tauthFactory.logout = function() {\r\n\t\t// clear the token\r\n\t\tAuthToken.setToken();\r\n\t};\r\n\r\n\t// check if a user is logged in\r\n\t// checks if there is a local token\r\n\tauthFactory.isLoggedIn = function() {\r\n\t\tif (AuthToken.getToken()) \r\n\t\t\treturn true;\r\n\t\telse\r\n\t\t\treturn false;\t\r\n\t};\r\n\r\n\t// get the logged in user\r\n\tauthFactory.getUser = function() {\r\n\t\tif (AuthToken.getToken())\r\n\t\t\treturn $http.get('/api/me', { cache: false });\r\n\t\telse\r\n\t\t\treturn $q.reject({ message: 'User has no token.' });\t\t\r\n\t};\r\n\r\n\t// return auth factory object\r\n\treturn authFactory;\r\n\r\n}])\r\n\r\n// ===================================================\r\n// factory for handling tokens\r\n// inject $window to store token client-side\r\n// ===================================================\r\n.factory('AuthToken', [\"$window\", function($window) {\r\n\r\n\tvar authTokenFactory = {};\r\n\r\n\t// get the token out of local storage\r\n\tauthTokenFactory.getToken = function() {\r\n\t\treturn $window.localStorage.getItem('token');\r\n\t};\r\n\r\n\t// function to set token or clear token\r\n\t// if a token is passed, set the token\r\n\t// if there is no token, clear it from local storage\r\n\tauthTokenFactory.setToken = function(token) {\r\n\t\tif (token)\r\n\t\t\t$window.localStorage.setItem('token', token);\r\n\t \telse\r\n\t\t\t$window.localStorage.removeItem('token');\r\n\t};\r\n\r\n\treturn authTokenFactory;\r\n\r\n}])\r\n\r\n// ===================================================\r\n// application configuration to integrate token into requests\r\n// ===================================================\r\n.factory('AuthInterceptor', [\"$q\", \"$location\", \"AuthToken\", function($q, $location, AuthToken) {\r\n\r\n\tvar interceptorFactory = {};\r\n\r\n\t// this will happen on all HTTP requests\r\n\tinterceptorFactory.request = function(config) {\r\n\r\n\t\t// grab the token\r\n\t\tvar token = AuthToken.getToken();\r\n\r\n\t\t// if the token exists, add it to the header as x-access-token\r\n\t\tif (token) \r\n\t\t\tconfig.headers['x-access-token'] = token;\r\n\t\t\r\n\t\treturn config;\r\n\t};\r\n\r\n\t// happens on response errors\r\n\tinterceptorFactory.responseError = function(response) {\r\n\r\n\t\t// if our server returns a 403 forbidden response\r\n\t\tif (response.status == 401) {\r\n\t\t\tAuthToken.setToken();\r\n\t\t\t$location.path('/signin');\r\n\t\t} else if (response.status == 403) {\r\n\t\t\t$location.path('/forbidden');\r\n\t\t}\r\n\r\n\t\t// return the errors from the server as a promise\r\n\t\treturn $q.reject(response);\r\n\t};\r\n\r\n\treturn interceptorFactory;\r\n\t\r\n}]);","angular.module('ticketCtrl', ['ticketService'])\r\n\r\n.controller('ticketController', [\"Ticket\", function(Ticket) {\r\n\r\n\tvar vm = this;\r\n\r\n\t// set a processing variable to show loading things\r\n\tvm.processing = true;\r\n\r\n\t// grab all the active tickets at page load\r\n\tTicket.active()\r\n\t\t.success(function(node) {\r\n\r\n\t\t\tif ( node.success == false || node.data == null ) {\r\n\t\t\t\tvm.tickets = null;\r\n\t\t\t} else {\r\n\t\t\t\tvm.tickets = node.data;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvm.processing = false;\r\n\t\t})\r\n\t\t.error(function(node) {\r\n\t\t\tif (node) {\r\n\t\t\t\tvm.message = node;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvm.tickets = null;\r\n\t\t\tvm.processing = false;\r\n\t\t})\r\n\r\n\t// function to delete a ticket\r\n\tvm.deleteTicket = function(id) {\r\n\t\tvm.processing = true;\r\n\t\t\r\n\t\tTicket.delete(id)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\t\r\n\t\t\t\tif ( data.success) {\r\n\t\t\t\t\tTicket.active()\r\n\t\t\t\t\t\t.success(function(node) {\r\n\t\t\t\t\t\t\tvm.tickets = node.data;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t});\r\n\t};\r\n}])\r\n\r\n\r\n.controller('ticketAllController', [\"Ticket\", function(Ticket) {\r\n\r\n\tvar vm = this;\r\n\r\n\t// set a processing variable to show loading things\r\n\tvm.processing = true;\r\n\r\n\t// grab all the active tickets at page load\r\n\tTicket.all()\r\n\t\t.success(function(node) {\r\n\r\n\t\t\tif ( node.success == false || node.data == null) {\r\n\t\t\t\tvm.tickets = null;\r\n\t\t\t} else {\r\n\t\t\t\tvm.tickets = node.data;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvm.processing = false;\r\n\t\t});\r\n\r\n\t// function to delete a ticket\r\n\tvm.deleteTicket = function(id) {\r\n\t\tvm.processing = true;\r\n\t\t\r\n\t\tTicket.delete(id)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\t\r\n\t\t\t\tif ( data.success) {\r\n\t\t\t\t\tTicket.all()\r\n\t\t\t\t\t\t.success(function(node) {\r\n\t\t\t\t\t\t\tvm.tickets = node.data;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t});\r\n\t};\r\n}])\r\n\r\n// controller applied to ticket creation page\r\n.controller('ticketCreateController', [\"$scope\", \"Ticket\", function($scope, Ticket) {\r\n\t\r\n\tvar vm = this;\r\n\r\n\t// function to create a ticket\r\n\tvm.saveTicket = function() {\r\n\t\tvm.processing = true;\r\n\t\tvm.message = '';\r\n\t\t\r\n\t\t// use the create function in the ticketService\r\n\t\tTicket.create(vm.ticketData)\r\n\t\t\t.success(function(node) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = node.message;\r\n\t\t\t\tvm.ticketData = {};\r\n\t\t\t\t$scope.ticketform.$setPristine();\r\n\t\t\t\t$(\"html, body\").animate({ scrollTop: 0 }, 200); \r\n\t\t\t});\r\n\t\t\t\r\n\t};\r\n}])\r\n\r\n// controller applied to ticket edit page\r\n.controller('ticketEditController', [\"$routeParams\", \"Ticket\", function($routeParams, Ticket) {\r\n\r\n\tvar vm = this;\r\n\r\n\t// get the ticket data for the ticket you want to edit\r\n\t// $routeParams is the way we grab data from the URL\r\n\tTicket.get($routeParams.ticket_id)\r\n\t\t.success(function(node) {\r\n\t\t\tvm.ticketData = node.data;\r\n\t\t});\r\n\r\n\t// function to save the ticket\r\n\tvm.saveTicket = function() {\r\n\t\tvm.processing = true;\r\n\t\tvm.message = '';\r\n\r\n\t\t// call the ticketService function to update \r\n\t\tTicket.update($routeParams.ticket_id, vm.ticketData)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t\t$(\"html, body\").animate({ scrollTop: 0 }, 200); \r\n\t\t\t});\r\n\t};\r\n\r\n}])\r\n\r\n.controller('ticketViewController', [\"$scope\", \"$routeParams\", \"$location\", \"Ticket\", function($scope, $routeParams, $location, Ticket) {\r\n\r\n\tvar vm = this;\r\n\tvm.processing = true;\r\n\tvm.event_processing = true;\r\n\t$scope.eventForm = {};\r\n\t\r\n\t// get the ticket data for the ticket you want to view\r\n\t// $routeParams is the way we grab data from the URL\r\n\tvm.getTicket = function(id) {\r\n\t\tTicket.get(id)\r\n\t\t\t.success(function(node) {\r\n\t\t\t\tvm.ticket = node.data;\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t})\r\n\t\t\t.error(function(err) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = err;\r\n\t\t\t});\r\n\t}\r\n\t\r\n\tvm.getTicket($routeParams.ticket_id);\r\n\t\r\n\tvm.deleteTicket = function(id) {\r\n\t\tvm.processing = true;\r\n\t\t\r\n\t\tTicket.delete(id)\r\n\t\t\t.success(function(data) {\t\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\t\r\n\t\t\t\tif ( data.success) {\r\n\t\t\t\t\t$location.path('/tickets');\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t}\r\n\t\r\n\tvm.getEvents = function() {\r\n\t\tTicket.event.get($routeParams.ticket_id)\r\n\t\t.success(function(node) {\r\n\t\t\tvm.events = node.data;\r\n\t\t\tvm.event_processing = false;\r\n\t\t})\r\n\t\t.error(function(err) {\r\n\t\t\tvm.event_processing = false;\r\n\t\t\tvm.message = err;\r\n\t\t});\r\n\t}\t\r\n\t\t\r\n\tvm.getEvents();\r\n\t\r\n\tvm.addEvent = function() {\r\n\t\tvm.event_processing = true;\r\n\t\tvm.message = '';\r\n\r\n\t\tTicket.event.create($routeParams.ticket_id, vm.eventData)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tvm.event_processing = false;\r\n\t\t\t\tvm.ticket.timespent += vm.eventData.timespent;\r\n\t\t\t\tvm.eventData = {};\r\n\t\t\t\t$scope.eventform.$setPristine();\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t\tvm.getEvents();\r\n\t\t\t})\r\n\t\t\t.error(function(data) {\r\n\t\t\t\tvm.event_processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t});\r\n\t}\r\n\t\r\n\tvm.deleteEvent = function(id) {\r\n\t\tvm.event_processing = true;\r\n\t\t\r\n\t\tTicket.event.delete(id)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tif ( data.success ) {\r\n\t\t\t\t\tvm.getEvents();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvm.getTicket($routeParams.ticket_id);\r\n\t\t\t\tvm.event_processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t})\r\n\t\t\t.error(function(data) {\r\n\t\t\t\tvm.event_processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t});\r\n\t}\r\n}])\r\n\r\n.controller('eventEditController', [\"$routeParams\", \"Ticket\", function($routeParams, Ticket) {\r\n\r\n\tvar vm = this;\r\n\tvm.eventData = {};\r\n\r\n\tTicket.event.getOne($routeParams.event_id)\r\n\t\t.success(function(node) {\r\n\t\t\tvm.eventData = node.data;\r\n\t\t});\r\n\r\n\t// function to save the event\r\n\tvm.saveEvent = function() {\r\n\t\tvm.processing = true;\r\n\t\tvm.message = '';\r\n\r\n\t\t// call the ticketService function to update \r\n\t\tTicket.event.update(vm.eventData.id, vm.eventData)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t\t$(\"html, body\").animate({ scrollTop: 0 }, 200); \r\n\t\t\t})\r\n\t\t\t.error(function(data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t});\r\n\t};\r\n}])\r\n\r\n.controller('feedbackController', [\"$scope\", \"$location\", \"Ticket\", function($scope, $location, Ticket) {\r\n\r\n\tvar vm = this;\r\n\tvm.comments = {};\r\n\tvm.processing = true;\r\n\t\r\n\tvm.getFeedback = function() {\r\n\t\tTicket.feedback.get()\r\n\t\t.success(function(node) {\r\n\t\t\tvm.comments = node.data;\r\n\t\t\tvm.processing = false;\r\n\t\t})\r\n\t\t.error(function(err) {\r\n\t\t\tvm.processing = false;\r\n\t\t\tvm.message = err;\r\n\t\t});\r\n\t};\r\n\t\t\r\n\tvm.getFeedback();\r\n\t\r\n\tvm.addComment = function() {\r\n\t\tvm.processing = true;\r\n\t\tvm.message = '';\r\n\t\t\r\n\t\tTicket.feedback.create(vm.feedbackData)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.feedbackData = {};\r\n\t\t\t\t$scope.commentform.$setPristine();\r\n\t\t\t\tvm.getFeedback();\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t})\r\n\t\t\t.error(function(data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t});\r\n\t};\r\n\t\r\n\tvm.deleteComment = function(id) {\r\n\t\tvm.processing = true;\r\n\t\t\r\n\t\tTicket.feedback.delete(id)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tif ( data.success ) {\r\n\t\t\t\t\tvm.getFeedback();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t})\r\n\t\t\t.error(function(data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t});\r\n\t};\r\n}])\r\n\r\n.controller('feedbackEditController', [\"$routeParams\", \"Ticket\", function($routeParams, Ticket) {\r\n\r\n\tvar vm = this;\r\n\tvm.processing = true;\r\n\tvm.feedbackData = {};\r\n\t\r\n\tTicket.feedback.getOne($routeParams.fb_id)\r\n\t\t.success(function(node) {\r\n\t\t\tvm.feedbackData = node.data;\r\n\t\t\tvm.processing = false;\r\n\t\t})\r\n\t\t.error(function(node) {\r\n\t\t\tvm.processing = false;\r\n\t\t});\r\n\r\n\t// function to save the event\r\n\tvm.saveComment = function() {\r\n\t\tvm.processing = true;\r\n\t\tvm.message = '';\r\n\r\n\t\t// call the ticketService function to update \r\n\t\tTicket.feedback.update(vm.feedbackData.id, vm.feedbackData)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t\t$(\"html, body\").animate({ scrollTop: 0 }, 200); \r\n\t\t\t})\r\n\t\t\t.error(function(data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t});\r\n\t};\r\n}])\r\n","angular.module('ticketService', [])\r\n\r\n.factory('Ticket', [\"$http\", function($http) {\r\n\r\n\t// create a new object\r\n\tvar ticketFactory = {};\r\n\r\n\t// get a single ticket\r\n\tticketFactory.get = function(id) {\r\n\t\treturn $http.get('/api/tickets/' + id);\r\n\t};\r\n\r\n\t// get all ticket\r\n\tticketFactory.active = function() {\r\n\t\treturn $http.get('/api/tickets');\r\n\t};\r\n\t\r\n\tticketFactory.all = function() {\r\n\t\treturn $http.get('/api/tickets/all');\r\n\t};\r\n\r\n\t// create a ticket\r\n\tticketFactory.create = function(ticketData) {\r\n\t\treturn $http.post('/api/tickets/', ticketData);\r\n\t};\r\n\r\n\t// update a ticket\r\n\tticketFactory.update = function(id, ticketData) {\r\n\t\treturn $http.put('/api/tickets/' + id, ticketData);\r\n\t};\r\n\r\n\t// delete a ticket\r\n\tticketFactory.delete = function(id) {\r\n\t\treturn $http.delete('/api/tickets/' + id);\r\n\t};\r\n\t\r\n\tticketFactory.event = {\r\n\t\tget : function(ticketId) {\r\n\t\t\treturn $http.get('/api/tickets/' + ticketId + '/events');\r\n\t\t},\r\n\t\t\r\n\t\tgetOne : function (eventId) {\r\n\t\t\treturn $http.get('/api/events/' + eventId);\r\n\t\t},\r\n\t\t\r\n\t\tcreate : function(ticketId, eventData) {\r\n\t\t\treturn $http.post('/api/tickets/' + ticketId + '/events', eventData);\r\n\t\t},\r\n\t\t\r\n\t\tupdate : function(eventId, eventData) {\r\n\t\t\treturn $http.put('/api/events/' + eventId, eventData);\r\n\t\t},\r\n\t\t\r\n\t\tdelete : function(eventId) {\r\n\t\t\treturn $http.delete('/api/events/' + eventId)\r\n\t\t}\r\n\t};\r\n\t\r\n\tticketFactory.feedback = {\r\n\t\tget : function () {\r\n\t\t\treturn $http.get('/api/feedback/');\r\n\t\t},\r\n\t\t\r\n\t\tgetOne : function (feedbackId) {\r\n\t\t\treturn $http.get('/api/feedback/' + feedbackId);\r\n\t\t},\r\n\t\t\r\n\t\tcreate : function (feedbackData) {\r\n\t\t\treturn $http.post('/api/feedback/', feedbackData);\r\n\t\t},\r\n\t\t\r\n\t\tupdate : function (feedbackId, feedbackData) {\r\n\t\t\treturn $http.put('/api/feedback/' + feedbackId, feedbackData);\r\n\t\t},\r\n\t\t\r\n\t\tdelete : function (feedbackId) {\r\n\t\t\treturn $http.delete('/api/feedback/' + feedbackId)\r\n\t\t}\r\n\t};\r\n\r\n\t// return our entire ticketFactory object\r\n\treturn ticketFactory;\r\n\r\n}]);","angular.module('userCtrl', ['userService'])\r\n\r\n.controller('userController', [\"User\", function(User) {\r\n\r\n\tvar vm = this;\r\n\r\n\t// set a processing variable to show loading things\r\n\tvm.processing = true;\r\n\r\n\t// grab all the users at page load\r\n\tUser.all()\r\n\t\t.success(function (node) {\r\n\r\n\t\t\tif ( node.success == false || node.data == null ) {\r\n\t\t\t\tvm.users = null;\r\n\t\t\t} else {\r\n\t\t\t\tvm.users = node.data;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvm.processing = false;\r\n\t\t})\r\n\t\t.error(function (node) {\r\n\t\t\tif (node) {\r\n\t\t\t\tvm.message = node;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvm.users = null;\r\n\t\t\tvm.processing = false;\r\n\t\t});\r\n\r\n\t// function to delete a user\r\n\tvm.deleteUser = function(id) {\r\n\t\tvm.processing = true;\r\n\t\tvm.users = {};\r\n\t\t\r\n\t\tUser.delete(id)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\t\r\n\t\t\t\t// get all users to update the table\r\n\t\t\t\t// could also return the list of users with the delete call\r\n\t\t\t\tUser.all()\r\n\t\t\t\t\t.success(function (node) {\r\n\t\t\t\t\t\tvm.processing = false;\r\n\t\t\t\t\t\tvm.users = node.data;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvm.message = 'The user was successfully deleted!'\r\n\t\t\t\t\t});\r\n\r\n\t\t\t});\r\n\t};\r\n\r\n}])\r\n\r\n// controller applied to user creation page\r\n.controller('userCreateController', [\"$scope\", \"User\", function($scope, User) {\r\n\t\r\n\tvar vm = this;\r\n\tvm.type = 'create';\r\n\tvm.userData = {};\r\n\r\n\t// function to create a user\r\n\tvm.saveUser = function() {\r\n\t\tvm.processing = true;\r\n\t\tvm.message = '';\r\n\r\n\t\t// use the create function in the userService\r\n\t\tUser.create(vm.userData)\r\n\t\t\t.success(function (data) {\r\n\t\t\t\tvm.processing = false;\t\t\t\t\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t\t\r\n\t\t\t\tif (data.success) {\r\n\t\t\t\t\tvm.userData = {};\r\n\t\t\t\t\t$scope.userform.$setPristine();\r\n\t\t\t\t\t$(\"html, body\").animate({ scrollTop: 0 }, 200); \r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t};\t\r\n\r\n}])\r\n\r\n// controller applied to user edit page\r\n.controller('userEditController', [\"$routeParams\", \"User\", function($routeParams, User) {\r\n\r\n\tvar vm = this;\r\n\tvm.type = 'edit';\r\n\t\r\n\t// get the user data for the user you want to edit\r\n\t// $routeParams is the way we grab data from the URL\r\n\tUser.get($routeParams.user_id)\r\n\t\t.success(function (node) {\r\n\t\t\tvm.userData = node.data;\r\n\t\t});\r\n\r\n\t// function to save the user\r\n\tvm.saveUser = function() {\r\n\t\tvm.processing = true;\r\n\t\tvm.message = '';\r\n\r\n\t\t// call the userService function to update \r\n\t\tUser.update($routeParams.user_id, vm.userData)\r\n\t\t\t.success(function (data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t\t$(\"html, body\").animate({ scrollTop: 0 }, 200); \r\n\t\t\t});\r\n\t};\r\n\r\n}])\r\n\r\n// controller applied to user edit page\r\n.controller('userProfileController', [\"$routeParams\", \"User\", function($routeParams, User) {\r\n\r\n\tvar vm = this;\r\n\r\n\t// get the user data for the user you want to edit\r\n\t// $routeParams is the way we grab data from the URL\r\n\tUser.self()\r\n\t\t.success(function (user) {\r\n\t\t\tvm.userData = user;\r\n\t\t});\r\n\r\n\t// function to save the user\r\n\tvm.saveUser = function() {\r\n\t\tvm.processing = true;\r\n\t\tvm.message = '';\r\n\r\n\t\t// call the userService function to update \r\n\t\tUser.update(vm.userData.id, vm.userData)\r\n\t\t\t.success(function (data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t\t$(\"html, body\").animate({ scrollTop: 0 }, 200); \r\n\t\t\t});\r\n\t};\r\n\r\n}]);\r\n\r\n","angular.module('userService', [])\r\n\r\n.factory('User', [\"$http\", function($http) {\r\n\r\n\t// create a new object\r\n\tvar userFactory = {};\r\n\r\n\t// get a single user\r\n\tuserFactory.get = function(id) {\r\n\t\treturn $http.get('/api/users/' + id);\r\n\t};\r\n\t\r\n\t// get self\r\n\tuserFactory.self = function() {\r\n\t\treturn $http.get('/api/me');\r\n\t};\r\n\r\n\t// get all users\r\n\tuserFactory.all = function() {\r\n\t\treturn $http.get('/api/users/');\r\n\t};\r\n\r\n\t// create a user\r\n\tuserFactory.create = function(userData) {\r\n\t\treturn $http.post('/api/users/', userData);\r\n\t};\r\n\r\n\t// update a user\r\n\tuserFactory.update = function(id, userData) {\r\n\t\treturn $http.put('/api/users/' + id, userData);\r\n\t};\r\n\r\n\t// delete a user\r\n\tuserFactory.delete = function(id) {\r\n\t\treturn $http.delete('/api/users/' + id);\r\n\t};\r\n\r\n\t// return our entire userFactory object\r\n\treturn userFactory;\r\n\r\n}]);","angular.module('comet', \r\n               [\r\n               \t\t'app.routes',\r\n                         'ngAnimate',\r\n               \t\t'authService',\r\n               \t\t'mainCtrl',\r\n               \t\t'userCtrl',\r\n               \t\t'userService',\r\n                         'ticketCtrl',\r\n                         'ticketService'\r\n               \t])\r\n\t// application configuration to integrate token into requests\r\n\t.config([\"$httpProvider\", function($httpProvider) {\r\n\r\n\t\t// attach our auth interceptor to the http requests\r\n\t\t$httpProvider.interceptors.push('AuthInterceptor');\r\n\r\n\t}]);","// inject ngRoute for all our routing needs\r\nangular.module('app.routes', ['ngRoute'])\r\n\t// configure our routes\r\n\t.config([\"$routeProvider\", \"$locationProvider\", function ($routeProvider, $locationProvider) {\r\n\t\t$routeProvider\r\n\r\n\t\t\t.when('/', {\r\n\t\t\t\ttemplateUrl: './views/pages/home.html'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/signin', {\r\n\t\t\t\ttemplateUrl : './views/pages/login.html',\r\n\t\t\t\tcontroller  : 'mainController',\r\n\t\t\t\tcontrollerAs: 'login'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/feedback', {\r\n\t\t\t\ttemplateUrl : './views/pages/feedback/all.html',\r\n\t\t\t\tcontroller  : 'feedbackController',\r\n\t\t\t\tcontrollerAs: 'feedback'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/feedback/:fb_id/edit', {\r\n\t\t\t\ttemplateUrl : './views/pages/feedback/edit.html',\r\n\t\t\t\tcontroller  : 'feedbackEditController',\r\n\t\t\t\tcontrollerAs: 'feedback'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t// backup 403 display if the server throws the 403 status code\r\n\t\t\t.when('/forbidden', {\r\n\t\t\t\ttemplateUrl : './views/pages/403.html'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/users', {\r\n\t\t\t\ttemplateUrl : './views/pages/users/all.html',\r\n\t\t\t\tcontroller  : 'userController',\r\n\t\t\t\tcontrollerAs: 'user'\r\n\t\t\t})\r\n\r\n\t\t\t.when('/users/create', {\r\n\t\t\t\ttemplateUrl : './views/pages/users/create.html',\r\n\t\t\t\tcontroller  : 'userCreateController',\r\n\t\t\t\tcontrollerAs: 'user'\r\n\t\t\t})\r\n\r\n\t\t\t.when('/users/:user_id', {\r\n\t\t\t\ttemplateUrl : './views/pages/users/edit.html',\r\n\t\t\t\tcontroller  : 'userEditController',\r\n\t\t\t\tcontrollerAs: 'user'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/profile', {\r\n\t\t\t\ttemplateUrl : './views/pages/profile.html',\r\n\t\t\t\tcontroller  : 'userProfileController',\r\n\t\t\t\tcontrollerAs: 'user'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/tickets', {\r\n\t\t\t\ttemplateUrl : './views/pages/tickets/all.html',\r\n\t\t\t\tcontroller  : 'ticketController',\r\n\t\t\t\tcontrollerAs: 'ticket'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/tickets/all', {\r\n\t\t\t\ttemplateUrl : './views/pages/tickets/all.html',\r\n\t\t\t\tcontroller  : 'ticketAllController',\r\n\t\t\t\tcontrollerAs: 'ticket'\r\n\t\t\t})\r\n\r\n\t\t\t.when('/tickets/create', {\r\n\t\t\t\ttemplateUrl : './views/pages/tickets/create.html',\r\n\t\t\t\tcontroller  : 'ticketCreateController',\r\n\t\t\t\tcontrollerAs: 'ticket'\r\n\t\t\t})\r\n\r\n\t\t\t.when('/tickets/:ticket_id/edit', {\r\n\t\t\t\ttemplateUrl : './views/pages/tickets/edit.html',\r\n\t\t\t\tcontroller  : 'ticketEditController',\r\n\t\t\t\tcontrollerAs: 'ticket'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/tickets/:ticket_id', {\r\n\t\t\t\ttemplateUrl : './views/pages/tickets/single.html',\r\n\t\t\t\tcontroller  : 'ticketViewController',\r\n\t\t\t\tcontrollerAs: 'ticket'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/events/:event_id/edit', {\r\n\t\t\t\ttemplateUrl : './views/pages/events/edit.html',\r\n\t\t\t\tcontroller  : 'eventEditController',\r\n\t\t\t\tcontrollerAs: 'event'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.otherwise({\r\n\t\t\t\tredirectTo: '/'\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t// set our app up to have pretty URLS\r\n\t\t\t$locationProvider.html5Mode(true);\r\n\t}]);\r\n\t","angular.module('mainCtrl', ['angularMoment'])\r\n\r\n.controller('mainController', function($rootScope, $location, Auth) {\r\n\r\n\tvar vm = this;\r\n\r\n\t// get info if a person is logged in\r\n\tvm.loggedIn = Auth.isLoggedIn();\r\n\t\r\n\t\r\n\t// check to see if a user is logged in on every request\r\n\t$rootScope.$on('$routeChangeStart', function(event) {\r\n\t\tvm.loggedIn = Auth.isLoggedIn();\t\r\n\t\t\r\n\t\tif (vm.loggedIn) {\r\n\t\t\tvm.location = $location.path();\r\n\t\t\tAuth.getUser()\r\n\t\t\t.then(function(node) {\r\n\t\t\t\tvm.user = node.data\r\n\t\t\t});\t\r\n\t\t\t\r\n\t\t\tif ( $location.path() == '/signin' ) {\r\n\t\t\t\t$location.path('/');\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} else if ( $location.path() == '/' || $location.path() == '/signin' ) {\r\n\t\t\t// do nothing;\r\n\t\t} else {\r\n\t\t\t$location.path('/signin');\r\n\t\t}\r\n\t\t// get user information on page load\r\n\t\t\r\n\t});\r\n\t\r\n\t// resets the view to the top of the page when a new route loads\r\n\t// this prevents the view focus from staying the same from page to page\r\n\t$rootScope.$on('$routeChangeSuccess',function() { \r\n\t\t$(\"html, body\").animate({ scrollTop: 0 }, 200); \r\n\t});\r\n\r\n\t// function to handle login form\r\n\tvm.doLogin = function() {\r\n\t\tvm.processing = true;\r\n\r\n\t\t// clear the error\r\n\t\tvm.error = '';\r\n\r\n\t\tAuth.login(vm.loginData.username, vm.loginData.password)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tvm.processing = false;\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tvm.user = vm.loginData.username;\r\n\t\t\t\t\r\n\t\t\t\t// if a user successfully logs in, redirect to tickets page\r\n\t\t\t\tif (data.success)\t\t\t\r\n\t\t\t\t\t$location.path('/');\r\n\t\t\t\telse \r\n\t\t\t\t\tvm.error = data.message;\r\n\t\t\t\t\r\n\t\t\t});\r\n\t};\r\n\r\n\t// function to handle logging out\r\n\tvm.doLogout = function() {\r\n\t\tAuth.logout();\r\n\t\tvm.user = null;\r\n\t\t\r\n\t\t$location.path('/signin');\r\n\t};\r\n\r\n});","angular.module('ticketCtrl', ['ticketService'])\r\n\r\n.controller('ticketController', function(Ticket) {\r\n\r\n\tvar vm = this;\r\n\r\n\t// set a processing variable to show loading things\r\n\tvm.processing = true;\r\n\r\n\t// grab all the active tickets at page load\r\n\tTicket.active()\r\n\t\t.success(function(node) {\r\n\r\n\t\t\tif ( node.success == false || node.data == null ) {\r\n\t\t\t\tvm.tickets = null;\r\n\t\t\t} else {\r\n\t\t\t\tvm.tickets = node.data;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvm.processing = false;\r\n\t\t})\r\n\t\t.error(function(node) {\r\n\t\t\tif (node) {\r\n\t\t\t\tvm.message = node;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvm.tickets = null;\r\n\t\t\tvm.processing = false;\r\n\t\t})\r\n\r\n\t// function to delete a ticket\r\n\tvm.deleteTicket = function(id) {\r\n\t\tvm.processing = true;\r\n\t\t\r\n\t\tTicket.delete(id)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\t\r\n\t\t\t\tif ( data.success) {\r\n\t\t\t\t\tTicket.active()\r\n\t\t\t\t\t\t.success(function(node) {\r\n\t\t\t\t\t\t\tvm.tickets = node.data;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t});\r\n\t};\r\n})\r\n\r\n\r\n.controller('ticketAllController', function(Ticket) {\r\n\r\n\tvar vm = this;\r\n\r\n\t// set a processing variable to show loading things\r\n\tvm.processing = true;\r\n\r\n\t// grab all the active tickets at page load\r\n\tTicket.all()\r\n\t\t.success(function(node) {\r\n\r\n\t\t\tif ( node.success == false || node.data == null) {\r\n\t\t\t\tvm.tickets = null;\r\n\t\t\t} else {\r\n\t\t\t\tvm.tickets = node.data;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvm.processing = false;\r\n\t\t});\r\n\r\n\t// function to delete a ticket\r\n\tvm.deleteTicket = function(id) {\r\n\t\tvm.processing = true;\r\n\t\t\r\n\t\tTicket.delete(id)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\t\r\n\t\t\t\tif ( data.success) {\r\n\t\t\t\t\tTicket.all()\r\n\t\t\t\t\t\t.success(function(node) {\r\n\t\t\t\t\t\t\tvm.tickets = node.data;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t});\r\n\t};\r\n})\r\n\r\n// controller applied to ticket creation page\r\n.controller('ticketCreateController', function($scope, Ticket) {\r\n\t\r\n\tvar vm = this;\r\n\r\n\t// function to create a ticket\r\n\tvm.saveTicket = function() {\r\n\t\tvm.processing = true;\r\n\t\tvm.message = '';\r\n\t\t\r\n\t\t// use the create function in the ticketService\r\n\t\tTicket.create(vm.ticketData)\r\n\t\t\t.success(function(node) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = node.message;\r\n\t\t\t\tvm.ticketData = {};\r\n\t\t\t\t$scope.ticketform.$setPristine();\r\n\t\t\t\t$(\"html, body\").animate({ scrollTop: 0 }, 200); \r\n\t\t\t});\r\n\t\t\t\r\n\t};\r\n})\r\n\r\n// controller applied to ticket edit page\r\n.controller('ticketEditController', function($routeParams, Ticket) {\r\n\r\n\tvar vm = this;\r\n\r\n\t// get the ticket data for the ticket you want to edit\r\n\t// $routeParams is the way we grab data from the URL\r\n\tTicket.get($routeParams.ticket_id)\r\n\t\t.success(function(node) {\r\n\t\t\tvm.ticketData = node.data;\r\n\t\t});\r\n\r\n\t// function to save the ticket\r\n\tvm.saveTicket = function() {\r\n\t\tvm.processing = true;\r\n\t\tvm.message = '';\r\n\r\n\t\t// call the ticketService function to update \r\n\t\tTicket.update($routeParams.ticket_id, vm.ticketData)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t\t$(\"html, body\").animate({ scrollTop: 0 }, 200); \r\n\t\t\t});\r\n\t};\r\n\r\n})\r\n\r\n.controller('ticketViewController', function($scope, $routeParams, $location, Ticket) {\r\n\r\n\tvar vm = this;\r\n\tvm.processing = true;\r\n\tvm.event_processing = true;\r\n\t$scope.eventForm = {};\r\n\t\r\n\t// get the ticket data for the ticket you want to view\r\n\t// $routeParams is the way we grab data from the URL\r\n\tvm.getTicket = function(id) {\r\n\t\tTicket.get(id)\r\n\t\t\t.success(function(node) {\r\n\t\t\t\tvm.ticket = node.data;\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t})\r\n\t\t\t.error(function(err) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = err;\r\n\t\t\t});\r\n\t}\r\n\t\r\n\tvm.getTicket($routeParams.ticket_id);\r\n\t\r\n\tvm.deleteTicket = function(id) {\r\n\t\tvm.processing = true;\r\n\t\t\r\n\t\tTicket.delete(id)\r\n\t\t\t.success(function(data) {\t\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\t\r\n\t\t\t\tif ( data.success) {\r\n\t\t\t\t\t$location.path('/tickets');\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t}\r\n\t\r\n\tvm.getEvents = function() {\r\n\t\tTicket.event.get($routeParams.ticket_id)\r\n\t\t.success(function(node) {\r\n\t\t\tvm.events = node.data;\r\n\t\t\tvm.event_processing = false;\r\n\t\t})\r\n\t\t.error(function(err) {\r\n\t\t\tvm.event_processing = false;\r\n\t\t\tvm.message = err;\r\n\t\t});\r\n\t}\t\r\n\t\t\r\n\tvm.getEvents();\r\n\t\r\n\tvm.addEvent = function() {\r\n\t\tvm.event_processing = true;\r\n\t\tvm.message = '';\r\n\r\n\t\tTicket.event.create($routeParams.ticket_id, vm.eventData)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tvm.event_processing = false;\r\n\t\t\t\tvm.ticket.timespent += vm.eventData.timespent;\r\n\t\t\t\tvm.eventData = {};\r\n\t\t\t\t$scope.eventform.$setPristine();\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t\tvm.getEvents();\r\n\t\t\t})\r\n\t\t\t.error(function(data) {\r\n\t\t\t\tvm.event_processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t});\r\n\t}\r\n\t\r\n\tvm.deleteEvent = function(id) {\r\n\t\tvm.event_processing = true;\r\n\t\t\r\n\t\tTicket.event.delete(id)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tif ( data.success ) {\r\n\t\t\t\t\tvm.getEvents();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvm.getTicket($routeParams.ticket_id);\r\n\t\t\t\tvm.event_processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t})\r\n\t\t\t.error(function(data) {\r\n\t\t\t\tvm.event_processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t});\r\n\t}\r\n})\r\n\r\n.controller('eventEditController', function($routeParams, Ticket) {\r\n\r\n\tvar vm = this;\r\n\tvm.eventData = {};\r\n\r\n\tTicket.event.getOne($routeParams.event_id)\r\n\t\t.success(function(node) {\r\n\t\t\tvm.eventData = node.data;\r\n\t\t});\r\n\r\n\t// function to save the event\r\n\tvm.saveEvent = function() {\r\n\t\tvm.processing = true;\r\n\t\tvm.message = '';\r\n\r\n\t\t// call the ticketService function to update \r\n\t\tTicket.event.update(vm.eventData.id, vm.eventData)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t\t$(\"html, body\").animate({ scrollTop: 0 }, 200); \r\n\t\t\t})\r\n\t\t\t.error(function(data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t});\r\n\t};\r\n})\r\n\r\n.controller('feedbackController', function($scope, $location, Ticket) {\r\n\r\n\tvar vm = this;\r\n\tvm.comments = {};\r\n\tvm.processing = true;\r\n\t\r\n\tvm.getFeedback = function() {\r\n\t\tTicket.feedback.get()\r\n\t\t.success(function(node) {\r\n\t\t\tvm.comments = node.data;\r\n\t\t\tvm.processing = false;\r\n\t\t})\r\n\t\t.error(function(err) {\r\n\t\t\tvm.processing = false;\r\n\t\t\tvm.message = err;\r\n\t\t});\r\n\t};\r\n\t\t\r\n\tvm.getFeedback();\r\n\t\r\n\tvm.addComment = function() {\r\n\t\tvm.processing = true;\r\n\t\tvm.message = '';\r\n\t\t\r\n\t\tTicket.feedback.create(vm.feedbackData)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.feedbackData = {};\r\n\t\t\t\t$scope.commentform.$setPristine();\r\n\t\t\t\tvm.getFeedback();\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t})\r\n\t\t\t.error(function(data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t});\r\n\t};\r\n\t\r\n\tvm.deleteComment = function(id) {\r\n\t\tvm.processing = true;\r\n\t\t\r\n\t\tTicket.feedback.delete(id)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tif ( data.success ) {\r\n\t\t\t\t\tvm.getFeedback();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t})\r\n\t\t\t.error(function(data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t});\r\n\t};\r\n})\r\n\r\n.controller('feedbackEditController', function($routeParams, Ticket) {\r\n\r\n\tvar vm = this;\r\n\tvm.processing = true;\r\n\tvm.feedbackData = {};\r\n\t\r\n\tTicket.feedback.getOne($routeParams.fb_id)\r\n\t\t.success(function(node) {\r\n\t\t\tvm.feedbackData = node.data;\r\n\t\t\tvm.processing = false;\r\n\t\t})\r\n\t\t.error(function(node) {\r\n\t\t\tvm.processing = false;\r\n\t\t});\r\n\r\n\t// function to save the event\r\n\tvm.saveComment = function() {\r\n\t\tvm.processing = true;\r\n\t\tvm.message = '';\r\n\r\n\t\t// call the ticketService function to update \r\n\t\tTicket.feedback.update(vm.feedbackData.id, vm.feedbackData)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t\t$(\"html, body\").animate({ scrollTop: 0 }, 200); \r\n\t\t\t})\r\n\t\t\t.error(function(data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t});\r\n\t};\r\n})\r\n","angular.module('userCtrl', ['userService'])\r\n\r\n.controller('userController', function(User) {\r\n\r\n\tvar vm = this;\r\n\r\n\t// set a processing variable to show loading things\r\n\tvm.processing = true;\r\n\r\n\t// grab all the users at page load\r\n\tUser.all()\r\n\t\t.success(function (node) {\r\n\r\n\t\t\tif ( node.success == false || node.data == null ) {\r\n\t\t\t\tvm.users = null;\r\n\t\t\t} else {\r\n\t\t\t\tvm.users = node.data;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvm.processing = false;\r\n\t\t})\r\n\t\t.error(function (node) {\r\n\t\t\tif (node) {\r\n\t\t\t\tvm.message = node;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvm.users = null;\r\n\t\t\tvm.processing = false;\r\n\t\t});\r\n\r\n\t// function to delete a user\r\n\tvm.deleteUser = function(id) {\r\n\t\tvm.processing = true;\r\n\t\tvm.users = {};\r\n\t\t\r\n\t\tUser.delete(id)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\t\r\n\t\t\t\t// get all users to update the table\r\n\t\t\t\t// could also return the list of users with the delete call\r\n\t\t\t\tUser.all()\r\n\t\t\t\t\t.success(function (node) {\r\n\t\t\t\t\t\tvm.processing = false;\r\n\t\t\t\t\t\tvm.users = node.data;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvm.message = 'The user was successfully deleted!'\r\n\t\t\t\t\t});\r\n\r\n\t\t\t});\r\n\t};\r\n\r\n})\r\n\r\n// controller applied to user creation page\r\n.controller('userCreateController', function($scope, User) {\r\n\t\r\n\tvar vm = this;\r\n\tvm.type = 'create';\r\n\tvm.userData = {};\r\n\r\n\t// function to create a user\r\n\tvm.saveUser = function() {\r\n\t\tvm.processing = true;\r\n\t\tvm.message = '';\r\n\r\n\t\t// use the create function in the userService\r\n\t\tUser.create(vm.userData)\r\n\t\t\t.success(function (data) {\r\n\t\t\t\tvm.processing = false;\t\t\t\t\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t\t\r\n\t\t\t\tif (data.success) {\r\n\t\t\t\t\tvm.userData = {};\r\n\t\t\t\t\t$scope.userform.$setPristine();\r\n\t\t\t\t\t$(\"html, body\").animate({ scrollTop: 0 }, 200); \r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t};\t\r\n\r\n})\r\n\r\n// controller applied to user edit page\r\n.controller('userEditController', function($routeParams, User) {\r\n\r\n\tvar vm = this;\r\n\tvm.type = 'edit';\r\n\t\r\n\t// get the user data for the user you want to edit\r\n\t// $routeParams is the way we grab data from the URL\r\n\tUser.get($routeParams.user_id)\r\n\t\t.success(function (node) {\r\n\t\t\tvm.userData = node.data;\r\n\t\t});\r\n\r\n\t// function to save the user\r\n\tvm.saveUser = function() {\r\n\t\tvm.processing = true;\r\n\t\tvm.message = '';\r\n\r\n\t\t// call the userService function to update \r\n\t\tUser.update($routeParams.user_id, vm.userData)\r\n\t\t\t.success(function (data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t\t$(\"html, body\").animate({ scrollTop: 0 }, 200); \r\n\t\t\t});\r\n\t};\r\n\r\n})\r\n\r\n// controller applied to user edit page\r\n.controller('userProfileController', function($routeParams, User) {\r\n\r\n\tvar vm = this;\r\n\r\n\t// get the user data for the user you want to edit\r\n\t// $routeParams is the way we grab data from the URL\r\n\tUser.self()\r\n\t\t.success(function (user) {\r\n\t\t\tvm.userData = user;\r\n\t\t});\r\n\r\n\t// function to save the user\r\n\tvm.saveUser = function() {\r\n\t\tvm.processing = true;\r\n\t\tvm.message = '';\r\n\r\n\t\t// call the userService function to update \r\n\t\tUser.update(vm.userData.id, vm.userData)\r\n\t\t\t.success(function (data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t\t$(\"html, body\").animate({ scrollTop: 0 }, 200); \r\n\t\t\t});\r\n\t};\r\n\r\n});\r\n\r\n","// Courtesy of Scotch.io Chris Sevilleja & Holly Lloyd\r\n// http://leanpub.com/mean-machine\r\n\r\nangular.module('authService', [])\r\n\r\n// ===================================================\r\n// auth factory to login and get information\r\n// inject $http for communicating with the API\r\n// inject $q to return promise objects\r\n// inject AuthToken to manage tokens\r\n// ===================================================\r\n.factory('Auth', function($http, $q, AuthToken) {\r\n\r\n\t// create auth factory object\r\n\tvar authFactory = {};\r\n\r\n\t// log a user in\r\n\tauthFactory.login = function(username, password) {\r\n\r\n\t\t// return the promise object and its data\r\n\t\treturn $http.post('/api/authenticate', {\r\n\t\t\tusername: username,\r\n\t\t\tpassword: password\r\n\t\t})\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tAuthToken.setToken(data.token);\r\n       \t\t\treturn data;\r\n\t\t\t});\r\n\t};\r\n\r\n\t// log a user out by clearing the token\r\n\tauthFactory.logout = function() {\r\n\t\t// clear the token\r\n\t\tAuthToken.setToken();\r\n\t};\r\n\r\n\t// check if a user is logged in\r\n\t// checks if there is a local token\r\n\tauthFactory.isLoggedIn = function() {\r\n\t\tif (AuthToken.getToken()) \r\n\t\t\treturn true;\r\n\t\telse\r\n\t\t\treturn false;\t\r\n\t};\r\n\r\n\t// get the logged in user\r\n\tauthFactory.getUser = function() {\r\n\t\tif (AuthToken.getToken())\r\n\t\t\treturn $http.get('/api/me', { cache: false });\r\n\t\telse\r\n\t\t\treturn $q.reject({ message: 'User has no token.' });\t\t\r\n\t};\r\n\r\n\t// return auth factory object\r\n\treturn authFactory;\r\n\r\n})\r\n\r\n// ===================================================\r\n// factory for handling tokens\r\n// inject $window to store token client-side\r\n// ===================================================\r\n.factory('AuthToken', function($window) {\r\n\r\n\tvar authTokenFactory = {};\r\n\r\n\t// get the token out of local storage\r\n\tauthTokenFactory.getToken = function() {\r\n\t\treturn $window.localStorage.getItem('token');\r\n\t};\r\n\r\n\t// function to set token or clear token\r\n\t// if a token is passed, set the token\r\n\t// if there is no token, clear it from local storage\r\n\tauthTokenFactory.setToken = function(token) {\r\n\t\tif (token)\r\n\t\t\t$window.localStorage.setItem('token', token);\r\n\t \telse\r\n\t\t\t$window.localStorage.removeItem('token');\r\n\t};\r\n\r\n\treturn authTokenFactory;\r\n\r\n})\r\n\r\n// ===================================================\r\n// application configuration to integrate token into requests\r\n// ===================================================\r\n.factory('AuthInterceptor', function($q, $location, AuthToken) {\r\n\r\n\tvar interceptorFactory = {};\r\n\r\n\t// this will happen on all HTTP requests\r\n\tinterceptorFactory.request = function(config) {\r\n\r\n\t\t// grab the token\r\n\t\tvar token = AuthToken.getToken();\r\n\r\n\t\t// if the token exists, add it to the header as x-access-token\r\n\t\tif (token) \r\n\t\t\tconfig.headers['x-access-token'] = token;\r\n\t\t\r\n\t\treturn config;\r\n\t};\r\n\r\n\t// happens on response errors\r\n\tinterceptorFactory.responseError = function(response) {\r\n\r\n\t\t// if our server returns a 403 forbidden response\r\n\t\tif (response.status == 401) {\r\n\t\t\tAuthToken.setToken();\r\n\t\t\t$location.path('/signin');\r\n\t\t} else if (response.status == 403) {\r\n\t\t\t$location.path('/forbidden');\r\n\t\t}\r\n\r\n\t\t// return the errors from the server as a promise\r\n\t\treturn $q.reject(response);\r\n\t};\r\n\r\n\treturn interceptorFactory;\r\n\t\r\n});","angular.module('ticketService', [])\r\n\r\n.factory('Ticket', function($http) {\r\n\r\n\t// create a new object\r\n\tvar ticketFactory = {};\r\n\r\n\t// get a single ticket\r\n\tticketFactory.get = function(id) {\r\n\t\treturn $http.get('/api/tickets/' + id);\r\n\t};\r\n\r\n\t// get all ticket\r\n\tticketFactory.active = function() {\r\n\t\treturn $http.get('/api/tickets');\r\n\t};\r\n\t\r\n\tticketFactory.all = function() {\r\n\t\treturn $http.get('/api/tickets/all');\r\n\t};\r\n\r\n\t// create a ticket\r\n\tticketFactory.create = function(ticketData) {\r\n\t\treturn $http.post('/api/tickets/', ticketData);\r\n\t};\r\n\r\n\t// update a ticket\r\n\tticketFactory.update = function(id, ticketData) {\r\n\t\treturn $http.put('/api/tickets/' + id, ticketData);\r\n\t};\r\n\r\n\t// delete a ticket\r\n\tticketFactory.delete = function(id) {\r\n\t\treturn $http.delete('/api/tickets/' + id);\r\n\t};\r\n\t\r\n\tticketFactory.event = {\r\n\t\tget : function(ticketId) {\r\n\t\t\treturn $http.get('/api/tickets/' + ticketId + '/events');\r\n\t\t},\r\n\t\t\r\n\t\tgetOne : function (eventId) {\r\n\t\t\treturn $http.get('/api/events/' + eventId);\r\n\t\t},\r\n\t\t\r\n\t\tcreate : function(ticketId, eventData) {\r\n\t\t\treturn $http.post('/api/tickets/' + ticketId + '/events', eventData);\r\n\t\t},\r\n\t\t\r\n\t\tupdate : function(eventId, eventData) {\r\n\t\t\treturn $http.put('/api/events/' + eventId, eventData);\r\n\t\t},\r\n\t\t\r\n\t\tdelete : function(eventId) {\r\n\t\t\treturn $http.delete('/api/events/' + eventId)\r\n\t\t}\r\n\t};\r\n\t\r\n\tticketFactory.feedback = {\r\n\t\tget : function () {\r\n\t\t\treturn $http.get('/api/feedback/');\r\n\t\t},\r\n\t\t\r\n\t\tgetOne : function (feedbackId) {\r\n\t\t\treturn $http.get('/api/feedback/' + feedbackId);\r\n\t\t},\r\n\t\t\r\n\t\tcreate : function (feedbackData) {\r\n\t\t\treturn $http.post('/api/feedback/', feedbackData);\r\n\t\t},\r\n\t\t\r\n\t\tupdate : function (feedbackId, feedbackData) {\r\n\t\t\treturn $http.put('/api/feedback/' + feedbackId, feedbackData);\r\n\t\t},\r\n\t\t\r\n\t\tdelete : function (feedbackId) {\r\n\t\t\treturn $http.delete('/api/feedback/' + feedbackId)\r\n\t\t}\r\n\t};\r\n\r\n\t// return our entire ticketFactory object\r\n\treturn ticketFactory;\r\n\r\n});","angular.module('userService', [])\r\n\r\n.factory('User', function($http) {\r\n\r\n\t// create a new object\r\n\tvar userFactory = {};\r\n\r\n\t// get a single user\r\n\tuserFactory.get = function(id) {\r\n\t\treturn $http.get('/api/users/' + id);\r\n\t};\r\n\t\r\n\t// get self\r\n\tuserFactory.self = function() {\r\n\t\treturn $http.get('/api/me');\r\n\t};\r\n\r\n\t// get all users\r\n\tuserFactory.all = function() {\r\n\t\treturn $http.get('/api/users/');\r\n\t};\r\n\r\n\t// create a user\r\n\tuserFactory.create = function(userData) {\r\n\t\treturn $http.post('/api/users/', userData);\r\n\t};\r\n\r\n\t// update a user\r\n\tuserFactory.update = function(id, userData) {\r\n\t\treturn $http.put('/api/users/' + id, userData);\r\n\t};\r\n\r\n\t// delete a user\r\n\tuserFactory.delete = function(id) {\r\n\t\treturn $http.delete('/api/users/' + id);\r\n\t};\r\n\r\n\t// return our entire userFactory object\r\n\treturn userFactory;\r\n\r\n});"],"sourceRoot":"/source/"}