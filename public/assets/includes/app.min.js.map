{"version":3,"sources":["1.js","2.js","3.js","4.js","5.js","6.js","7.js","8.js"],"names":["angular","module","controller","$rootScope","$location","Auth","vm","this","loggedIn","isLoggedIn","$on","event","location","path","getUser","then","node","user","data","$","animate","scrollTop","doLogin","processing","error","login","loginData","username","password","success","message","doLogout","logout","factory","$http","$q","AuthToken","authFactory","post","setToken","token","getToken","get","cache","reject","$window","authTokenFactory","localStorage","getItem","setItem","removeItem","interceptorFactory","request","config","headers","responseError","response","status","Ticket","active","tickets","deleteTicket","id","all","$scope","saveTicket","create","ticketData","ticketform","$setPristine","$routeParams","ticket_id","update","event_processing","eventForm","ticket","err","getEvents","events","addEvent","eventData","eventform","deleteEvent","getOne","event_id","saveEvent","comments","getFeedback","feedback","addComment","feedbackData","commentform","deleteComment","fb_id","saveComment","ticketFactory","put","ticketId","eventId","delete","feedbackId","User","users","deleteUser","type","userData","saveUser","userform","user_id","self","userFactory","$httpProvider","interceptors","push","$routeProvider","$locationProvider","when","templateUrl","controllerAs","otherwise","redirectTo","html5Mode"],"mappings":"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","file":"app.min.js","sourcesContent":["angular.module('mainCtrl', ['angularMoment'])\r\n\r\n.controller('mainController', [\"$rootScope\", \"$location\", \"Auth\", function($rootScope, $location, Auth) {\r\n\r\n\tvar vm = this;\r\n\r\n\t// get info if a person is logged in\r\n\tvm.loggedIn = Auth.isLoggedIn();\r\n\t\r\n\t\r\n\t// check to see if a user is logged in on every request\r\n\t$rootScope.$on('$routeChangeStart', function(event) {\r\n\t\tvm.loggedIn = Auth.isLoggedIn();\t\r\n\t\t\r\n\t\tif (vm.loggedIn) {\r\n\t\t\tvm.location = $location.path();\r\n\t\t\tAuth.getUser()\r\n\t\t\t.then(function(node) {\r\n\t\t\t\tvm.user = node.data\r\n\t\t\t});\t\r\n\t\t\t\r\n\t\t\tif ( $location.path() == '/signin' ) {\r\n\t\t\t\t$location.path('/');\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} else if ( $location.path() == '/' || $location.path() == '/signin' ) {\r\n\t\t\t// do nothing;\r\n\t\t} else {\r\n\t\t\t$location.path('/signin');\r\n\t\t}\r\n\t\t// get user information on page load\r\n\t\t\r\n\t});\r\n\t\r\n\t// resets the view to the top of the page when a new route loads\r\n\t// this prevents the view focus from staying the same from page to page\r\n\t$rootScope.$on('$routeChangeSuccess',function() { \r\n\t\t$(\"html, body\").animate({ scrollTop: 0 }, 200); \r\n\t});\r\n\r\n\t// function to handle login form\r\n\tvm.doLogin = function() {\r\n\t\tvm.processing = true;\r\n\r\n\t\t// clear the error\r\n\t\tvm.error = '';\r\n\r\n\t\tAuth.login(vm.loginData.username, vm.loginData.password)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tvm.processing = false;\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tvm.user = vm.loginData.username;\r\n\t\t\t\t\r\n\t\t\t\t// if a user successfully logs in, redirect to tickets page\r\n\t\t\t\tif (data.success)\t\t\t\r\n\t\t\t\t\t$location.path('/');\r\n\t\t\t\telse \r\n\t\t\t\t\tvm.error = data.message;\r\n\t\t\t\t\r\n\t\t\t});\r\n\t};\r\n\r\n\t// function to handle logging out\r\n\tvm.doLogout = function() {\r\n\t\tAuth.logout();\r\n\t\tvm.user = null;\r\n\t\t\r\n\t\t$location.path('/signin');\r\n\t};\r\n\r\n}]);","// Courtesy of Scotch.io Chris Sevilleja & Holly Lloyd\r\n// http://leanpub.com/mean-machine\r\n\r\nangular.module('authService', [])\r\n\r\n// ===================================================\r\n// auth factory to login and get information\r\n// inject $http for communicating with the API\r\n// inject $q to return promise objects\r\n// inject AuthToken to manage tokens\r\n// ===================================================\r\n.factory('Auth', [\"$http\", \"$q\", \"AuthToken\", function($http, $q, AuthToken) {\r\n\r\n\t// create auth factory object\r\n\tvar authFactory = {};\r\n\r\n\t// log a user in\r\n\tauthFactory.login = function(username, password) {\r\n\r\n\t\t// return the promise object and its data\r\n\t\treturn $http.post('/api/authenticate', {\r\n\t\t\tusername: username,\r\n\t\t\tpassword: password\r\n\t\t})\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tAuthToken.setToken(data.token);\r\n       \t\t\treturn data;\r\n\t\t\t});\r\n\t};\r\n\r\n\t// log a user out by clearing the token\r\n\tauthFactory.logout = function() {\r\n\t\t// clear the token\r\n\t\tAuthToken.setToken();\r\n\t};\r\n\r\n\t// check if a user is logged in\r\n\t// checks if there is a local token\r\n\tauthFactory.isLoggedIn = function() {\r\n\t\tif (AuthToken.getToken()) \r\n\t\t\treturn true;\r\n\t\telse\r\n\t\t\treturn false;\t\r\n\t};\r\n\r\n\t// get the logged in user\r\n\tauthFactory.getUser = function() {\r\n\t\tif (AuthToken.getToken())\r\n\t\t\treturn $http.get('/api/me', { cache: false });\r\n\t\telse\r\n\t\t\treturn $q.reject({ message: 'User has no token.' });\t\t\r\n\t};\r\n\r\n\t// return auth factory object\r\n\treturn authFactory;\r\n\r\n}])\r\n\r\n// ===================================================\r\n// factory for handling tokens\r\n// inject $window to store token client-side\r\n// ===================================================\r\n.factory('AuthToken', [\"$window\", function($window) {\r\n\r\n\tvar authTokenFactory = {};\r\n\r\n\t// get the token out of local storage\r\n\tauthTokenFactory.getToken = function() {\r\n\t\treturn $window.localStorage.getItem('token');\r\n\t};\r\n\r\n\t// function to set token or clear token\r\n\t// if a token is passed, set the token\r\n\t// if there is no token, clear it from local storage\r\n\tauthTokenFactory.setToken = function(token) {\r\n\t\tif (token)\r\n\t\t\t$window.localStorage.setItem('token', token);\r\n\t \telse\r\n\t\t\t$window.localStorage.removeItem('token');\r\n\t};\r\n\r\n\treturn authTokenFactory;\r\n\r\n}])\r\n\r\n// ===================================================\r\n// application configuration to integrate token into requests\r\n// ===================================================\r\n.factory('AuthInterceptor', [\"$q\", \"$location\", \"AuthToken\", function($q, $location, AuthToken) {\r\n\r\n\tvar interceptorFactory = {};\r\n\r\n\t// this will happen on all HTTP requests\r\n\tinterceptorFactory.request = function(config) {\r\n\r\n\t\t// grab the token\r\n\t\tvar token = AuthToken.getToken();\r\n\r\n\t\t// if the token exists, add it to the header as x-access-token\r\n\t\tif (token) \r\n\t\t\tconfig.headers['x-access-token'] = token;\r\n\t\t\r\n\t\treturn config;\r\n\t};\r\n\r\n\t// happens on response errors\r\n\tinterceptorFactory.responseError = function(response) {\r\n\r\n\t\t// if our server returns a 403 forbidden response\r\n\t\tif (response.status == 401) {\r\n\t\t\tAuthToken.setToken();\r\n\t\t\t$location.path('/signin');\r\n\t\t} else if (response.status == 403) {\r\n\t\t\t$location.path('/forbidden');\r\n\t\t}\r\n\r\n\t\t// return the errors from the server as a promise\r\n\t\treturn $q.reject(response);\r\n\t};\r\n\r\n\treturn interceptorFactory;\r\n\t\r\n}]);","angular.module('ticketCtrl', ['ticketService'])\r\n\r\n.controller('ticketController', [\"Ticket\", function(Ticket) {\r\n\r\n\tvar vm = this;\r\n\r\n\t// set a processing variable to show loading things\r\n\tvm.processing = true;\r\n\r\n\t// grab all the active tickets at page load\r\n\tTicket.active()\r\n\t\t.success(function(node) {\r\n\r\n\t\t\tif ( node.success == false || node.data == null ) {\r\n\t\t\t\tvm.tickets = null;\r\n\t\t\t} else {\r\n\t\t\t\tvm.tickets = node.data;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvm.processing = false;\r\n\t\t})\r\n\t\t.error(function(node) {\r\n\t\t\tif (node) {\r\n\t\t\t\tvm.message = node;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvm.tickets = null;\r\n\t\t\tvm.processing = false;\r\n\t\t})\r\n\r\n\t// function to delete a ticket\r\n\tvm.deleteTicket = function(id) {\r\n\t\tvm.processing = true;\r\n\t\t\r\n\t\tTicket.delete(id)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\t\r\n\t\t\t\tif ( data.success) {\r\n\t\t\t\t\tTicket.active()\r\n\t\t\t\t\t\t.success(function(node) {\r\n\t\t\t\t\t\t\tvm.tickets = node.data;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t});\r\n\t};\r\n}])\r\n\r\n\r\n.controller('ticketAllController', [\"Ticket\", function(Ticket) {\r\n\r\n\tvar vm = this;\r\n\r\n\t// set a processing variable to show loading things\r\n\tvm.processing = true;\r\n\r\n\t// grab all the active tickets at page load\r\n\tTicket.all()\r\n\t\t.success(function(node) {\r\n\r\n\t\t\tif ( node.success == false || node.data == null) {\r\n\t\t\t\tvm.tickets = null;\r\n\t\t\t} else {\r\n\t\t\t\tvm.tickets = node.data;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvm.processing = false;\r\n\t\t});\r\n\r\n\t// function to delete a ticket\r\n\tvm.deleteTicket = function(id) {\r\n\t\tvm.processing = true;\r\n\t\t\r\n\t\tTicket.delete(id)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\t\r\n\t\t\t\tif ( data.success) {\r\n\t\t\t\t\tTicket.all()\r\n\t\t\t\t\t\t.success(function(node) {\r\n\t\t\t\t\t\t\tvm.tickets = node.data;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t});\r\n\t};\r\n}])\r\n\r\n// controller applied to ticket creation page\r\n.controller('ticketCreateController', [\"$scope\", \"Ticket\", function($scope, Ticket) {\r\n\t\r\n\tvar vm = this;\r\n\r\n\t// function to create a ticket\r\n\tvm.saveTicket = function() {\r\n\t\tvm.processing = true;\r\n\t\tvm.message = '';\r\n\t\t\r\n\t\t// use the create function in the ticketService\r\n\t\tTicket.create(vm.ticketData)\r\n\t\t\t.success(function(node) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = node.message;\r\n\t\t\t\tvm.ticketData = {};\r\n\t\t\t\t$scope.ticketform.$setPristine();\r\n\t\t\t\t$(\"html, body\").animate({ scrollTop: 0 }, 200); \r\n\t\t\t});\r\n\t\t\t\r\n\t};\r\n}])\r\n\r\n// controller applied to ticket edit page\r\n.controller('ticketEditController', [\"$routeParams\", \"Ticket\", function($routeParams, Ticket) {\r\n\r\n\tvar vm = this;\r\n\r\n\t// get the ticket data for the ticket you want to edit\r\n\t// $routeParams is the way we grab data from the URL\r\n\tTicket.get($routeParams.ticket_id)\r\n\t\t.success(function(node) {\r\n\t\t\tvm.ticketData = node.data;\r\n\t\t});\r\n\r\n\t// function to save the ticket\r\n\tvm.saveTicket = function() {\r\n\t\tvm.processing = true;\r\n\t\tvm.message = '';\r\n\r\n\t\t// call the ticketService function to update \r\n\t\tTicket.update($routeParams.ticket_id, vm.ticketData)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t\t$(\"html, body\").animate({ scrollTop: 0 }, 200); \r\n\t\t\t});\r\n\t};\r\n\r\n}])\r\n\r\n.controller('ticketViewController', [\"$scope\", \"$routeParams\", \"$location\", \"Ticket\", function($scope, $routeParams, $location, Ticket) {\r\n\r\n\tvar vm = this;\r\n\tvm.processing = true;\r\n\tvm.event_processing = true;\r\n\t$scope.eventForm = {};\r\n\t\r\n\t// get the ticket data for the ticket you want to view\r\n\t// $routeParams is the way we grab data from the URL\r\n\tTicket.get($routeParams.ticket_id)\r\n\t\t.success(function(node) {\r\n\t\t\tvm.ticket = node.data;\r\n\t\t\tvm.processing = false;\r\n\t\t})\r\n\t\t.error(function(err) {\r\n\t\t\tvm.processing = false;\r\n\t\t\tvm.message = err;\r\n\t\t});\r\n\t\r\n\tvm.deleteTicket = function(id) {\r\n\t\tvm.processing = true;\r\n\t\t\r\n\t\tTicket.delete(id)\r\n\t\t\t.success(function(data) {\t\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\t\r\n\t\t\t\tif ( data.success) {\r\n\t\t\t\t\t$location.path('/tickets');\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t}\r\n\t\r\n\tvm.getEvents = function() {\r\n\t\tTicket.event.get($routeParams.ticket_id)\r\n\t\t.success(function(node) {\r\n\t\t\tvm.events = node.data;\r\n\t\t\tvm.event_processing = false;\r\n\t\t})\r\n\t\t.error(function(err) {\r\n\t\t\tvm.event_processing = false;\r\n\t\t\tvm.message = err;\r\n\t\t});\r\n\t}\t\r\n\t\t\r\n\tvm.getEvents();\r\n\t\r\n\tvm.addEvent = function() {\r\n\t\tvm.event_processing = true;\r\n\t\tvm.message = '';\r\n\r\n\t\tTicket.event.create($routeParams.ticket_id, vm.eventData)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tvm.event_processing = false;\r\n\t\t\t\tvm.eventData = {};\r\n\t\t\t\t$scope.eventform.$setPristine();\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t\tvm.getEvents();\r\n\t\t\t})\r\n\t\t\t.error(function(data) {\r\n\t\t\t\tvm.event_processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t});\r\n\t}\r\n\t\r\n\tvm.deleteEvent = function(id) {\r\n\t\tvm.event_processing = true;\r\n\t\t\r\n\t\tTicket.event.delete(id)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tif ( data.success ) {\r\n\t\t\t\t\tvm.getEvents();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvm.event_processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t})\r\n\t\t\t.error(function(data) {\r\n\t\t\t\tvm.event_processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t});\r\n\t}\r\n}])\r\n\r\n.controller('eventEditController', [\"$routeParams\", \"Ticket\", function($routeParams, Ticket) {\r\n\r\n\tvar vm = this;\r\n\tvm.eventData = {};\r\n\r\n\tTicket.event.getOne($routeParams.event_id)\r\n\t\t.success(function(node) {\r\n\t\t\tvm.eventData = node.data;\r\n\t\t});\r\n\r\n\t// function to save the event\r\n\tvm.saveEvent = function() {\r\n\t\tvm.processing = true;\r\n\t\tvm.message = '';\r\n\r\n\t\t// call the ticketService function to update \r\n\t\tTicket.event.update(vm.eventData.id, vm.eventData)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t\t$(\"html, body\").animate({ scrollTop: 0 }, 200); \r\n\t\t\t})\r\n\t\t\t.error(function(data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t});\r\n\t};\r\n}])\r\n\r\n.controller('feedbackController', [\"$scope\", \"$location\", \"Ticket\", function($scope, $location, Ticket) {\r\n\r\n\tvar vm = this;\r\n\tvm.comments = {};\r\n\tvm.processing = true;\r\n\t\r\n\tvm.getFeedback = function() {\r\n\t\tTicket.feedback.get()\r\n\t\t.success(function(node) {\r\n\t\t\tvm.comments = node.data;\r\n\t\t\tvm.processing = false;\r\n\t\t})\r\n\t\t.error(function(err) {\r\n\t\t\tvm.processing = false;\r\n\t\t\tvm.message = err;\r\n\t\t});\r\n\t};\r\n\t\t\r\n\tvm.getFeedback();\r\n\t\r\n\tvm.addComment = function() {\r\n\t\tvm.processing = true;\r\n\t\tvm.message = '';\r\n\t\t\r\n\t\tTicket.feedback.create(vm.feedbackData)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.feedbackData = {};\r\n\t\t\t\t$scope.commentform.$setPristine();\r\n\t\t\t\tvm.getFeedback();\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t})\r\n\t\t\t.error(function(data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t});\r\n\t};\r\n\t\r\n\tvm.deleteComment = function(id) {\r\n\t\tvm.processing = true;\r\n\t\t\r\n\t\tTicket.feedback.delete(id)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tif ( data.success ) {\r\n\t\t\t\t\tvm.getFeedback();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t})\r\n\t\t\t.error(function(data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t});\r\n\t};\r\n}])\r\n\r\n.controller('feedbackEditController', [\"$routeParams\", \"Ticket\", function($routeParams, Ticket) {\r\n\r\n\tvar vm = this;\r\n\tvm.processing = true;\r\n\tvm.feedbackData = {};\r\n\t\r\n\tTicket.feedback.getOne($routeParams.fb_id)\r\n\t\t.success(function(node) {\r\n\t\t\tvm.feedbackData = node.data;\r\n\t\t\tvm.processing = false;\r\n\t\t})\r\n\t\t.error(function(node) {\r\n\t\t\tvm.processing = false;\r\n\t\t});\r\n\r\n\t// function to save the event\r\n\tvm.saveComment = function() {\r\n\t\tvm.processing = true;\r\n\t\tvm.message = '';\r\n\r\n\t\t// call the ticketService function to update \r\n\t\tTicket.feedback.update(vm.feedbackData.id, vm.feedbackData)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t\t$(\"html, body\").animate({ scrollTop: 0 }, 200); \r\n\t\t\t})\r\n\t\t\t.error(function(data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t});\r\n\t};\r\n}])\r\n","angular.module('ticketService', [])\r\n\r\n.factory('Ticket', [\"$http\", function($http) {\r\n\r\n\t// create a new object\r\n\tvar ticketFactory = {};\r\n\r\n\t// get a single ticket\r\n\tticketFactory.get = function(id) {\r\n\t\treturn $http.get('/api/tickets/' + id);\r\n\t};\r\n\r\n\t// get all ticket\r\n\tticketFactory.active = function() {\r\n\t\treturn $http.get('/api/tickets');\r\n\t};\r\n\t\r\n\tticketFactory.all = function() {\r\n\t\treturn $http.get('/api/tickets/all');\r\n\t};\r\n\r\n\t// create a ticket\r\n\tticketFactory.create = function(ticketData) {\r\n\t\treturn $http.post('/api/tickets/', ticketData);\r\n\t};\r\n\r\n\t// update a ticket\r\n\tticketFactory.update = function(id, ticketData) {\r\n\t\treturn $http.put('/api/tickets/' + id, ticketData);\r\n\t};\r\n\r\n\t// delete a ticket\r\n\tticketFactory.delete = function(id) {\r\n\t\treturn $http.delete('/api/tickets/' + id);\r\n\t};\r\n\t\r\n\tticketFactory.event = {\r\n\t\tget : function(ticketId) {\r\n\t\t\treturn $http.get('/api/tickets/' + ticketId + '/events');\r\n\t\t},\r\n\t\t\r\n\t\tgetOne : function (eventId) {\r\n\t\t\treturn $http.get('/api/events/' + eventId);\r\n\t\t},\r\n\t\t\r\n\t\tcreate : function(ticketId, eventData) {\r\n\t\t\treturn $http.post('/api/tickets/' + ticketId + '/events', eventData);\r\n\t\t},\r\n\t\t\r\n\t\tupdate : function(eventId, eventData) {\r\n\t\t\treturn $http.put('/api/events/' + eventId, eventData);\r\n\t\t},\r\n\t\t\r\n\t\tdelete : function(eventId) {\r\n\t\t\treturn $http.delete('/api/events/' + eventId)\r\n\t\t}\r\n\t};\r\n\t\r\n\tticketFactory.feedback = {\r\n\t\tget : function () {\r\n\t\t\treturn $http.get('/api/feedback/');\r\n\t\t},\r\n\t\t\r\n\t\tgetOne : function (feedbackId) {\r\n\t\t\treturn $http.get('/api/feedback/' + feedbackId);\r\n\t\t},\r\n\t\t\r\n\t\tcreate : function (feedbackData) {\r\n\t\t\treturn $http.post('/api/feedback/', feedbackData);\r\n\t\t},\r\n\t\t\r\n\t\tupdate : function (feedbackId, feedbackData) {\r\n\t\t\treturn $http.put('/api/feedback/' + feedbackId, feedbackData);\r\n\t\t},\r\n\t\t\r\n\t\tdelete : function (feedbackId) {\r\n\t\t\treturn $http.delete('/api/feedback/' + feedbackId)\r\n\t\t}\r\n\t};\r\n\r\n\t// return our entire ticketFactory object\r\n\treturn ticketFactory;\r\n\r\n}]);","angular.module('userCtrl', ['userService'])\r\n\r\n.controller('userController', [\"User\", function(User) {\r\n\r\n\tvar vm = this;\r\n\r\n\t// set a processing variable to show loading things\r\n\tvm.processing = true;\r\n\r\n\t// grab all the users at page load\r\n\tUser.all()\r\n\t\t.success(function (node) {\r\n\r\n\t\t\tif ( node.success == false || node.data == null ) {\r\n\t\t\t\tvm.users = null;\r\n\t\t\t} else {\r\n\t\t\t\tvm.users = node.data;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvm.processing = false;\r\n\t\t})\r\n\t\t.error(function (node) {\r\n\t\t\tif (node) {\r\n\t\t\t\tvm.message = node;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvm.users = null;\r\n\t\t\tvm.processing = false;\r\n\t\t});\r\n\r\n\t// function to delete a user\r\n\tvm.deleteUser = function(id) {\r\n\t\tvm.processing = true;\r\n\t\tvm.users = {};\r\n\t\t\r\n\t\tUser.delete(id)\r\n\t\t\t.success(function(data) {\r\n\t\t\t\t\r\n\t\t\t\t// get all users to update the table\r\n\t\t\t\t// could also return the list of users with the delete call\r\n\t\t\t\tUser.all()\r\n\t\t\t\t\t.success(function (node) {\r\n\t\t\t\t\t\tvm.processing = false;\r\n\t\t\t\t\t\tvm.users = node.data;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvm.message = 'The user was successfully deleted!'\r\n\t\t\t\t\t});\r\n\r\n\t\t\t});\r\n\t};\r\n\r\n}])\r\n\r\n// controller applied to user creation page\r\n.controller('userCreateController', [\"$scope\", \"User\", function($scope, User) {\r\n\t\r\n\tvar vm = this;\r\n\tvm.type = 'create';\r\n\tvm.userData = {};\r\n\r\n\t// function to create a user\r\n\tvm.saveUser = function() {\r\n\t\tvm.processing = true;\r\n\t\tvm.message = '';\r\n\r\n\t\t// use the create function in the userService\r\n\t\tUser.create(vm.userData)\r\n\t\t\t.success(function (data) {\r\n\t\t\t\tvm.processing = false;\t\t\t\t\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t\t\r\n\t\t\t\tif (data.success) {\r\n\t\t\t\t\tvm.userData = {};\r\n\t\t\t\t\t$scope.userform.$setPristine();\r\n\t\t\t\t\t$(\"html, body\").animate({ scrollTop: 0 }, 200); \r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t};\t\r\n\r\n}])\r\n\r\n// controller applied to user edit page\r\n.controller('userEditController', [\"$routeParams\", \"User\", function($routeParams, User) {\r\n\r\n\tvar vm = this;\r\n\tvm.type = 'edit';\r\n\t\r\n\t// get the user data for the user you want to edit\r\n\t// $routeParams is the way we grab data from the URL\r\n\tUser.get($routeParams.user_id)\r\n\t\t.success(function (node) {\r\n\t\t\tvm.userData = node.data;\r\n\t\t});\r\n\r\n\t// function to save the user\r\n\tvm.saveUser = function() {\r\n\t\tvm.processing = true;\r\n\t\tvm.message = '';\r\n\r\n\t\t// call the userService function to update \r\n\t\tUser.update($routeParams.user_id, vm.userData)\r\n\t\t\t.success(function (data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t\t$(\"html, body\").animate({ scrollTop: 0 }, 200); \r\n\t\t\t});\r\n\t};\r\n\r\n}])\r\n\r\n// controller applied to user edit page\r\n.controller('userProfileController', [\"$routeParams\", \"User\", function($routeParams, User) {\r\n\r\n\tvar vm = this;\r\n\r\n\t// get the user data for the user you want to edit\r\n\t// $routeParams is the way we grab data from the URL\r\n\tUser.self()\r\n\t\t.success(function (user) {\r\n\t\t\tvm.userData = user;\r\n\t\t});\r\n\r\n\t// function to save the user\r\n\tvm.saveUser = function() {\r\n\t\tvm.processing = true;\r\n\t\tvm.message = '';\r\n\r\n\t\t// call the userService function to update \r\n\t\tUser.update(vm.userData.id, vm.userData)\r\n\t\t\t.success(function (data) {\r\n\t\t\t\tvm.processing = false;\r\n\t\t\t\tvm.message = data.message;\r\n\t\t\t\t$(\"html, body\").animate({ scrollTop: 0 }, 200); \r\n\t\t\t});\r\n\t};\r\n\r\n}]);\r\n\r\n","angular.module('userService', [])\r\n\r\n.factory('User', [\"$http\", function($http) {\r\n\r\n\t// create a new object\r\n\tvar userFactory = {};\r\n\r\n\t// get a single user\r\n\tuserFactory.get = function(id) {\r\n\t\treturn $http.get('/api/users/' + id);\r\n\t};\r\n\t\r\n\t// get self\r\n\tuserFactory.self = function() {\r\n\t\treturn $http.get('/api/me');\r\n\t};\r\n\r\n\t// get all users\r\n\tuserFactory.all = function() {\r\n\t\treturn $http.get('/api/users/');\r\n\t};\r\n\r\n\t// create a user\r\n\tuserFactory.create = function(userData) {\r\n\t\treturn $http.post('/api/users/', userData);\r\n\t};\r\n\r\n\t// update a user\r\n\tuserFactory.update = function(id, userData) {\r\n\t\treturn $http.put('/api/users/' + id, userData);\r\n\t};\r\n\r\n\t// delete a user\r\n\tuserFactory.delete = function(id) {\r\n\t\treturn $http.delete('/api/users/' + id);\r\n\t};\r\n\r\n\t// return our entire userFactory object\r\n\treturn userFactory;\r\n\r\n}]);","angular.module('comet', \r\n               [\r\n               \t\t'app.routes',\r\n                         'ngAnimate',\r\n               \t\t'authService',\r\n               \t\t'mainCtrl',\r\n               \t\t'userCtrl',\r\n               \t\t'userService',\r\n                         'ticketCtrl',\r\n                         'ticketService'\r\n               \t])\r\n\t// application configuration to integrate token into requests\r\n\t.config([\"$httpProvider\", function($httpProvider) {\r\n\r\n\t\t// attach our auth interceptor to the http requests\r\n\t\t$httpProvider.interceptors.push('AuthInterceptor');\r\n\r\n\t}]);","// inject ngRoute for all our routing needs\r\nangular.module('app.routes', ['ngRoute'])\r\n\t// configure our routes\r\n\t.config([\"$routeProvider\", \"$locationProvider\", function ($routeProvider, $locationProvider) {\r\n\t\t$routeProvider\r\n\r\n\t\t\t.when('/', {\r\n\t\t\t\ttemplateUrl: './views/pages/home.html'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/signin', {\r\n\t\t\t\ttemplateUrl : './views/pages/login.html',\r\n\t\t\t\tcontroller  : 'mainController',\r\n\t\t\t\tcontrollerAs: 'login'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/feedback', {\r\n\t\t\t\ttemplateUrl : './views/pages/feedback/all.html',\r\n\t\t\t\tcontroller  : 'feedbackController',\r\n\t\t\t\tcontrollerAs: 'feedback'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/feedback/:fb_id/edit', {\r\n\t\t\t\ttemplateUrl : './views/pages/feedback/edit.html',\r\n\t\t\t\tcontroller  : 'feedbackEditController',\r\n\t\t\t\tcontrollerAs: 'feedback'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t// backup 403 display if the server throws the 403 status code\r\n\t\t\t.when('/forbidden', {\r\n\t\t\t\ttemplateUrl : './views/pages/403.html'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/users', {\r\n\t\t\t\ttemplateUrl : './views/pages/users/all.html',\r\n\t\t\t\tcontroller  : 'userController',\r\n\t\t\t\tcontrollerAs: 'user'\r\n\t\t\t})\r\n\r\n\t\t\t.when('/users/create', {\r\n\t\t\t\ttemplateUrl : './views/pages/users/create.html',\r\n\t\t\t\tcontroller  : 'userCreateController',\r\n\t\t\t\tcontrollerAs: 'user'\r\n\t\t\t})\r\n\r\n\t\t\t.when('/users/:user_id', {\r\n\t\t\t\ttemplateUrl : './views/pages/users/edit.html',\r\n\t\t\t\tcontroller  : 'userEditController',\r\n\t\t\t\tcontrollerAs: 'user'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/profile', {\r\n\t\t\t\ttemplateUrl : './views/pages/profile.html',\r\n\t\t\t\tcontroller  : 'userProfileController',\r\n\t\t\t\tcontrollerAs: 'user'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/tickets', {\r\n\t\t\t\ttemplateUrl : './views/pages/tickets/all.html',\r\n\t\t\t\tcontroller  : 'ticketController',\r\n\t\t\t\tcontrollerAs: 'ticket'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/tickets/all', {\r\n\t\t\t\ttemplateUrl : './views/pages/tickets/all.html',\r\n\t\t\t\tcontroller  : 'ticketAllController',\r\n\t\t\t\tcontrollerAs: 'ticket'\r\n\t\t\t})\r\n\r\n\t\t\t.when('/tickets/create', {\r\n\t\t\t\ttemplateUrl : './views/pages/tickets/create.html',\r\n\t\t\t\tcontroller  : 'ticketCreateController',\r\n\t\t\t\tcontrollerAs: 'ticket'\r\n\t\t\t})\r\n\r\n\t\t\t.when('/tickets/:ticket_id/edit', {\r\n\t\t\t\ttemplateUrl : './views/pages/tickets/edit.html',\r\n\t\t\t\tcontroller  : 'ticketEditController',\r\n\t\t\t\tcontrollerAs: 'ticket'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/tickets/:ticket_id', {\r\n\t\t\t\ttemplateUrl : './views/pages/tickets/single.html',\r\n\t\t\t\tcontroller  : 'ticketViewController',\r\n\t\t\t\tcontrollerAs: 'ticket'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.when('/events/:event_id/edit', {\r\n\t\t\t\ttemplateUrl : './views/pages/events/edit.html',\r\n\t\t\t\tcontroller  : 'eventEditController',\r\n\t\t\t\tcontrollerAs: 'event'\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t.otherwise({\r\n\t\t\t\tredirectTo: '/'\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t// set our app up to have pretty URLS\r\n\t\t\t$locationProvider.html5Mode(true);\r\n\t}]);\r\n\t"],"sourceRoot":"/source/"}